{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sonwonjae\\\\react\\\\react-tutorial\\\\canvas-example\\\\src\\\\three\\\\ThreeTuto2.js\";\nimport React, { Component } from 'react';\nimport * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols';\nimport * as dat from 'dat.gui';\nimport gsap from 'gsap';\nimport { random } from 'gsap/gsap-core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class ThreeTuto2 extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.animate = () => {\n      this.renderer.render(this.scene, this.camera);\n      requestAnimationFrame(this.animate); // 배경 움직임\n\n      this.frame += 0.01;\n      const {\n        array,\n        originalPosition\n      } = this.planeMesh.geometry.attributes.position;\n\n      for (let i = 0; i < array.length; i += 3) {\n        array[i] = originalPosition[i] + Math.cos(this.frame + this.randomValue) * 0.01;\n        this.planeMesh.geometry.attributes.position.needsUpdate = true;\n      }\n\n      this.raycaster.setFromCamera(this.mouse, this.camera);\n      const intersects = this.raycaster.intersectObject(this.planeMesh);\n\n      if (intersects.length > 0) {\n        const {\n          color\n        } = intersects[0].object.geometry.attributes; // vertice 1\n\n        color.setX(intersects[0].face.a, 0.1);\n        color.setY(intersects[0].face.a, 0.5);\n        color.setZ(intersects[0].face.a, 1); // vertice 2\n\n        color.setX(intersects[0].face.b, 0.1);\n        color.setY(intersects[0].face.b, 0.5);\n        color.setZ(intersects[0].face.b, 1); // vertice 3\n\n        color.setX(intersects[0].face.c, 0.1);\n        color.setY(intersects[0].face.c, 0.5);\n        color.setZ(intersects[0].face.c, 1);\n        color.needsUpdate = true;\n        const initialColor = {\n          r: 0,\n          g: 0.19,\n          b: 0.4\n        };\n        const hoverColor = {\n          r: 0.1,\n          g: 0.5,\n          b: 1\n        };\n        gsap.to(hoverColor, {\n          r: initialColor.r,\n          g: initialColor.g,\n          b: initialColor.b,\n          duration: 1,\n          onUpdate: () => {\n            // vertice 1\n            color.setX(intersects[0].face.a, hoverColor.r);\n            color.setY(intersects[0].face.a, hoverColor.g);\n            color.setZ(intersects[0].face.a, hoverColor.b); // vertice 2\n\n            color.setX(intersects[0].face.b, hoverColor.r);\n            color.setY(intersects[0].face.b, hoverColor.g);\n            color.setZ(intersects[0].face.b, hoverColor.b); // vertice 3\n\n            color.setX(intersects[0].face.c, hoverColor.r);\n            color.setY(intersects[0].face.c, hoverColor.g);\n            color.setZ(intersects[0].face.c, hoverColor.b);\n          }\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    const width = window.innerWidth;\n    const height = window.innerHeight; //raycaster 추가\n\n    const raycaster = new THREE.Raycaster(); // 카메라로 찍으려는 3D무대\n\n    const scene = new THREE.Scene(); // 카메라\n\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000); // 플레이어 or 영사기\n\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(width, height); // 픽셀단위로 진하게 해줌\n\n    renderer.setPixelRatio(devicePixelRatio); // HTML canvas\n\n    this.element.appendChild(renderer.domElement); //GUI\n\n    const gui = new dat.GUI();\n    const world = {\n      plane: {\n        width: 20,\n        height: 20,\n        widthSegments: 17,\n        heightSegments: 17\n      }\n    }; // x값 조정하는 GUI\n\n    gui.add(world.plane, 'width', 1, 40).onChange(generatePlane); // y값 조정하는 GUI\n\n    gui.add(world.plane, 'height', 1, 40).onChange(generatePlane); // x seg값 조정하는 GUI\n\n    gui.add(world.plane, 'widthSegments', 1, 50).onChange(generatePlane); // y seg값 조정하는 GUI\n\n    gui.add(world.plane, 'heightSegments', 1, 50).onChange(generatePlane);\n\n    function generatePlane() {\n      planeMesh.geometry.dispose();\n      planeMesh.geometry = new THREE.PlaneGeometry(world.plane.width, world.plane.height, world.plane.widthSegments, world.plane.heightSegments);\n      const {\n        array\n      } = planeMesh.geometry.attributes.position;\n\n      for (let i = 0; i < array.length; i += 3) {\n        const x = array[i];\n        const y = array[i + 1];\n        const z = array[i + 2];\n        array[i + 2] = z + Math.random();\n      }\n\n      const colors = [];\n\n      for (let i = 0; i < planeMesh.geometry.attributes.position.count; i++) {\n        // r,g,b\n        colors.push(0, 0.19, 0.4);\n      }\n\n      console.log(planeMesh);\n      planeMesh.geometry.setAttribute('color', new THREE.BufferAttribute(new Float32Array(colors), 3));\n    } // PlaneGeometry\n\n\n    const planeGeometry = new THREE.PlaneGeometry(world.plane.width, world.plane.height, world.plane.widthSegments, world.plane.heightSegments);\n    const planeMeterial = new THREE.MeshPhongMaterial({\n      side: THREE.DoubleSide,\n      flatShading: THREE.FlatShading,\n      vertexColors: true\n    });\n    const planeMesh = new THREE.Mesh(planeGeometry, planeMeterial);\n    scene.add(planeMesh); // x,y,z값 조정 방법\n\n    const {\n      array\n    } = planeMesh.geometry.attributes.position;\n    const randomValue = [];\n\n    for (let i = 0; i < array.length; i += 3) {\n      const x = array[i];\n      const y = array[i + 1];\n      const z = array[i + 2];\n      array[i] = x + (Math.random() - 0.5);\n      array[i + 2] = y + (Math.random() - 0.5);\n      array[i + 2] = z + Math.random();\n      randomValue.push(Math.random());\n    } // randomValue 정의\n\n\n    planeMesh.geometry.attributes.position.randomValue = randomValue; // OriginalPosition 정의\n\n    planeMesh.geometry.attributes.position.originalPosition = planeMesh.geometry.attributes.position.array; // 색 속성 조정\n\n    const colors = [];\n\n    for (let i = 0; i < planeMesh.geometry.attributes.position.count; i++) {\n      // r,g,b\n      colors.push(0, 0.19, 0.4);\n    }\n\n    console.log(planeMesh);\n    planeMesh.geometry.setAttribute('color', new THREE.BufferAttribute(new Float32Array(colors), 3)); // 빛\n\n    const light = new THREE.DirectionalLight(0xffffff, 1);\n    light.position.set(0, 0, 1);\n    scene.add(light); // 뒤쪽 빛\n\n    const backLight = new THREE.DirectionalLight(0xffffff, 1);\n    backLight.position.set(0, 0, -1);\n    scene.add(backLight); // OrbitControls\n\n    new OrbitControls(camera, renderer.domElement); // 카메라 뷰 깊이\n\n    camera.position.z = 5;\n    const mouse = {\n      x: undefined,\n      y: undefined\n    };\n    window.addEventListener('mousemove', e => {\n      mouse.x = e.clientX / window.innerWidth * 2 - 1;\n      mouse.y = -(e.clientY / window.innerHeight) * 2 + 1;\n    }); // frame\n\n    const frame = 0;\n    this.scene = scene;\n    this.camera = camera;\n    this.renderer = renderer;\n    this.planeMesh = planeMesh;\n    this.mouse = mouse;\n    this.raycaster = raycaster;\n    this.frame = frame;\n    this.randomValue = randomValue;\n    this.animate();\n  } // 첫 줄은 카메라 뷰로 렌더링하겠다\n  // 다음 두 줄은 3D박스를 x,y축으로 0.01씩 이동하겠다\n  // 마지막 requestAnimationFrame 함수는 this.animate함수를 계속 호출하라는 뜻\n  // 최대 1ms (1초에 60번씩 그려라) => 성능이 낮은 PC나 CPU/GPU 점유율에 따라 동적으로 변하기도 함\n\n\n  render() {\n    // 마우스 무브 움직임 추가\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: el => this.element = el\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 12\n    }, this);\n  }\n\n}\nexport default ThreeTuto2;","map":{"version":3,"sources":["C:/Users/sonwonjae/react/react-tutorial/canvas-example/src/three/ThreeTuto2.js"],"names":["React","Component","THREE","OrbitControls","dat","gsap","random","ThreeTuto2","animate","renderer","render","scene","camera","requestAnimationFrame","frame","array","originalPosition","planeMesh","geometry","attributes","position","i","length","Math","cos","randomValue","needsUpdate","raycaster","setFromCamera","mouse","intersects","intersectObject","color","object","setX","face","a","setY","setZ","b","c","initialColor","r","g","hoverColor","to","duration","onUpdate","componentDidMount","width","window","innerWidth","height","innerHeight","Raycaster","Scene","PerspectiveCamera","WebGLRenderer","setSize","setPixelRatio","devicePixelRatio","element","appendChild","domElement","gui","GUI","world","plane","widthSegments","heightSegments","add","onChange","generatePlane","dispose","PlaneGeometry","x","y","z","colors","count","push","console","log","setAttribute","BufferAttribute","Float32Array","planeGeometry","planeMeterial","MeshPhongMaterial","side","DoubleSide","flatShading","FlatShading","vertexColors","Mesh","light","DirectionalLight","set","backLight","undefined","addEventListener","e","clientX","clientY","el"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport * as THREE from 'three';\r\nimport OrbitControls from 'three-orbitcontrols';\r\n\r\nimport * as dat from 'dat.gui';\r\nimport gsap from 'gsap';\r\nimport { random } from 'gsap/gsap-core';\r\n\r\nexport class ThreeTuto2 extends Component {\r\n  componentDidMount() {\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n\r\n    //raycaster 추가\r\n    const raycaster = new THREE.Raycaster();\r\n\r\n    // 카메라로 찍으려는 3D무대\r\n    const scene = new THREE.Scene();\r\n\r\n    // 카메라\r\n    const camera = new THREE.PerspectiveCamera(\r\n      75,\r\n      window.innerWidth / window.innerHeight,\r\n      0.1,\r\n      1000\r\n    );\r\n\r\n    // 플레이어 or 영사기\r\n    const renderer = new THREE.WebGLRenderer();\r\n    renderer.setSize(width, height);\r\n\r\n    // 픽셀단위로 진하게 해줌\r\n    renderer.setPixelRatio(devicePixelRatio);\r\n\r\n    // HTML canvas\r\n    this.element.appendChild(renderer.domElement);\r\n    //GUI\r\n    const gui = new dat.GUI();\r\n    const world = {\r\n      plane: {\r\n        width: 20,\r\n        height: 20,\r\n        widthSegments: 17,\r\n        heightSegments: 17\r\n      }\r\n    };\r\n\r\n    // x값 조정하는 GUI\r\n    gui.add(world.plane, 'width', 1, 40).onChange(generatePlane);\r\n\r\n    // y값 조정하는 GUI\r\n    gui.add(world.plane, 'height', 1, 40).onChange(generatePlane);\r\n\r\n    // x seg값 조정하는 GUI\r\n    gui.add(world.plane, 'widthSegments', 1, 50).onChange(generatePlane);\r\n\r\n    // y seg값 조정하는 GUI\r\n    gui.add(world.plane, 'heightSegments', 1, 50).onChange(generatePlane);\r\n\r\n    function generatePlane() {\r\n      planeMesh.geometry.dispose();\r\n      planeMesh.geometry = new THREE.PlaneGeometry(\r\n        world.plane.width,\r\n        world.plane.height,\r\n        world.plane.widthSegments,\r\n        world.plane.heightSegments\r\n      );\r\n      const { array } = planeMesh.geometry.attributes.position;\r\n      for (let i = 0; i < array.length; i += 3) {\r\n        const x = array[i];\r\n        const y = array[i + 1];\r\n        const z = array[i + 2];\r\n\r\n        array[i + 2] = z + Math.random();\r\n      }\r\n      const colors = [];\r\n      for (let i = 0; i < planeMesh.geometry.attributes.position.count; i++) {\r\n        // r,g,b\r\n        colors.push(0, 0.19, 0.4);\r\n      }\r\n      console.log(planeMesh);\r\n\r\n      planeMesh.geometry.setAttribute(\r\n        'color',\r\n        new THREE.BufferAttribute(new Float32Array(colors), 3)\r\n      );\r\n    }\r\n\r\n    // PlaneGeometry\r\n    const planeGeometry = new THREE.PlaneGeometry(\r\n      world.plane.width,\r\n      world.plane.height,\r\n      world.plane.widthSegments,\r\n      world.plane.heightSegments\r\n    );\r\n    const planeMeterial = new THREE.MeshPhongMaterial({\r\n      side: THREE.DoubleSide,\r\n      flatShading: THREE.FlatShading,\r\n      vertexColors: true\r\n    });\r\n    const planeMesh = new THREE.Mesh(planeGeometry, planeMeterial);\r\n    scene.add(planeMesh);\r\n\r\n    // x,y,z값 조정 방법\r\n    const { array } = planeMesh.geometry.attributes.position;\r\n    const randomValue = [];\r\n    for (let i = 0; i < array.length; i += 3) {\r\n      const x = array[i];\r\n      const y = array[i + 1];\r\n      const z = array[i + 2];\r\n\r\n      array[i] = x + (Math.random() - 0.5);\r\n      array[i + 2] = y + (Math.random() - 0.5);\r\n      array[i + 2] = z + Math.random();\r\n\r\n      randomValue.push(Math.random());\r\n    }\r\n\r\n    // randomValue 정의\r\n    planeMesh.geometry.attributes.position.randomValue = randomValue;\r\n\r\n    // OriginalPosition 정의\r\n    planeMesh.geometry.attributes.position.originalPosition =\r\n      planeMesh.geometry.attributes.position.array;\r\n\r\n    // 색 속성 조정\r\n    const colors = [];\r\n    for (let i = 0; i < planeMesh.geometry.attributes.position.count; i++) {\r\n      // r,g,b\r\n      colors.push(0, 0.19, 0.4);\r\n    }\r\n    console.log(planeMesh);\r\n\r\n    planeMesh.geometry.setAttribute(\r\n      'color',\r\n      new THREE.BufferAttribute(new Float32Array(colors), 3)\r\n    );\r\n\r\n    // 빛\r\n    const light = new THREE.DirectionalLight(0xffffff, 1);\r\n    light.position.set(0, 0, 1);\r\n    scene.add(light);\r\n\r\n    // 뒤쪽 빛\r\n    const backLight = new THREE.DirectionalLight(0xffffff, 1);\r\n    backLight.position.set(0, 0, -1);\r\n    scene.add(backLight);\r\n\r\n    // OrbitControls\r\n    new OrbitControls(camera, renderer.domElement);\r\n\r\n    // 카메라 뷰 깊이\r\n    camera.position.z = 5;\r\n\r\n    const mouse = {\r\n      x: undefined,\r\n      y: undefined\r\n    };\r\n\r\n    window.addEventListener('mousemove', (e) => {\r\n      mouse.x = (e.clientX / window.innerWidth) * 2 - 1;\r\n      mouse.y = -(e.clientY / window.innerHeight) * 2 + 1;\r\n    });\r\n\r\n    // frame\r\n    const frame = 0;\r\n\r\n    this.scene = scene;\r\n    this.camera = camera;\r\n    this.renderer = renderer;\r\n    this.planeMesh = planeMesh;\r\n\r\n    this.mouse = mouse;\r\n    this.raycaster = raycaster;\r\n\r\n    this.frame = frame;\r\n    this.randomValue = randomValue;\r\n    this.animate();\r\n  }\r\n\r\n  // 첫 줄은 카메라 뷰로 렌더링하겠다\r\n  // 다음 두 줄은 3D박스를 x,y축으로 0.01씩 이동하겠다\r\n  // 마지막 requestAnimationFrame 함수는 this.animate함수를 계속 호출하라는 뜻\r\n  // 최대 1ms (1초에 60번씩 그려라) => 성능이 낮은 PC나 CPU/GPU 점유율에 따라 동적으로 변하기도 함\r\n\r\n  animate = () => {\r\n    this.renderer.render(this.scene, this.camera);\r\n    requestAnimationFrame(this.animate);\r\n\r\n    // 배경 움직임\r\n    this.frame += 0.01;\r\n    const {\r\n      array,\r\n      originalPosition\r\n    } = this.planeMesh.geometry.attributes.position;\r\n    for (let i = 0; i < array.length; i += 3) {\r\n      array[i] =\r\n        originalPosition[i] + Math.cos(this.frame + this.randomValue) * 0.01;\r\n\r\n      this.planeMesh.geometry.attributes.position.needsUpdate = true;\r\n    }\r\n\r\n    this.raycaster.setFromCamera(this.mouse, this.camera);\r\n    const intersects = this.raycaster.intersectObject(this.planeMesh);\r\n    if (intersects.length > 0) {\r\n      const { color } = intersects[0].object.geometry.attributes;\r\n\r\n      // vertice 1\r\n      color.setX(intersects[0].face.a, 0.1);\r\n      color.setY(intersects[0].face.a, 0.5);\r\n      color.setZ(intersects[0].face.a, 1);\r\n\r\n      // vertice 2\r\n      color.setX(intersects[0].face.b, 0.1);\r\n      color.setY(intersects[0].face.b, 0.5);\r\n      color.setZ(intersects[0].face.b, 1);\r\n\r\n      // vertice 3\r\n      color.setX(intersects[0].face.c, 0.1);\r\n      color.setY(intersects[0].face.c, 0.5);\r\n      color.setZ(intersects[0].face.c, 1);\r\n\r\n      color.needsUpdate = true;\r\n\r\n      const initialColor = {\r\n        r: 0,\r\n        g: 0.19,\r\n        b: 0.4\r\n      };\r\n\r\n      const hoverColor = {\r\n        r: 0.1,\r\n        g: 0.5,\r\n        b: 1\r\n      };\r\n      gsap.to(hoverColor, {\r\n        r: initialColor.r,\r\n        g: initialColor.g,\r\n        b: initialColor.b,\r\n        duration: 1,\r\n        onUpdate: () => {\r\n          // vertice 1\r\n          color.setX(intersects[0].face.a, hoverColor.r);\r\n          color.setY(intersects[0].face.a, hoverColor.g);\r\n          color.setZ(intersects[0].face.a, hoverColor.b);\r\n\r\n          // vertice 2\r\n          color.setX(intersects[0].face.b, hoverColor.r);\r\n          color.setY(intersects[0].face.b, hoverColor.g);\r\n          color.setZ(intersects[0].face.b, hoverColor.b);\r\n\r\n          // vertice 3\r\n          color.setX(intersects[0].face.c, hoverColor.r);\r\n          color.setY(intersects[0].face.c, hoverColor.g);\r\n          color.setZ(intersects[0].face.c, hoverColor.b);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    // 마우스 무브 움직임 추가\r\n\r\n    return <div ref={(el) => (this.element = el)}></div>;\r\n  }\r\n}\r\n\r\nexport default ThreeTuto2;\r\n"]},"metadata":{},"sourceType":"module"}