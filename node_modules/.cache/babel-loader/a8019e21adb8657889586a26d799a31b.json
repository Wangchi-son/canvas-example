{"ast":null,"code":"'use strict';\n\nvar FontFace = require('./FontFace');\n\nvar clamp = require('./clamp');\n\nvar measureText = require('./measureText');\n/**\n * Draw an image into a <canvas>. This operation requires that the image\n * already be loaded.\n *\n * @param {CanvasContext} ctx\n * @param {Image} image The source image (from ImageCache.get())\n * @param {Number} x The x-coordinate to begin drawing\n * @param {Number} y The y-coordinate to begin drawing\n * @param {Number} width The desired width\n * @param {Number} height The desired height\n * @param {Object} options Available options are:\n *   {Number} originalWidth\n *   {Number} originalHeight\n *   {Object} focusPoint {x,y}\n *   {String} backgroundColor\n */\n\n\nfunction drawImage(ctx, image, x, y, width, height, options) {\n  options = options || {};\n\n  if (options.backgroundColor) {\n    ctx.save();\n    ctx.fillStyle = options.backgroundColor;\n    ctx.fillRect(x, y, width, height);\n    ctx.restore();\n  }\n\n  var dx = 0;\n  var dy = 0;\n  var dw = 0;\n  var dh = 0;\n  var sx = 0;\n  var sy = 0;\n  var sw = 0;\n  var sh = 0;\n  var scale;\n  var scaledSize;\n  var actualSize;\n  var focusPoint = options.focusPoint;\n  actualSize = {\n    width: image.getWidth(),\n    height: image.getHeight()\n  };\n  scale = Math.max(width / actualSize.width, height / actualSize.height) || 1;\n  scale = parseFloat(scale.toFixed(4), 10);\n  scaledSize = {\n    width: actualSize.width * scale,\n    height: actualSize.height * scale\n  };\n\n  if (focusPoint) {\n    // Since image hints are relative to image \"original\" dimensions (original != actual),\n    // use the original size for focal point cropping.\n    if (options.originalHeight) {\n      focusPoint.x *= actualSize.height / options.originalHeight;\n      focusPoint.y *= actualSize.height / options.originalHeight;\n    }\n  } else {\n    // Default focal point to [0.5, 0.5]\n    focusPoint = {\n      x: actualSize.width * 0.5,\n      y: actualSize.height * 0.5\n    };\n  } // Clip the image to rectangle (sx, sy, sw, sh).\n\n\n  sx = Math.round(clamp(width * 0.5 - focusPoint.x * scale, width - scaledSize.width, 0)) * (-1 / scale);\n  sy = Math.round(clamp(height * 0.5 - focusPoint.y * scale, height - scaledSize.height, 0)) * (-1 / scale);\n  sw = Math.round(actualSize.width - sx * 2);\n  sh = Math.round(actualSize.height - sy * 2); // Scale the image to dimensions (dw, dh).\n\n  dw = Math.round(width);\n  dh = Math.round(height); // Draw the image on the canvas at coordinates (dx, dy).\n\n  dx = Math.round(x);\n  dy = Math.round(y);\n  ctx.drawImage(image.getRawImage(), sx, sy, sw, sh, dx, dy, dw, dh);\n}\n/**\n * @param {CanvasContext} ctx\n * @param {String} text The text string to render\n * @param {Number} x The x-coordinate to begin drawing\n * @param {Number} y The y-coordinate to begin drawing\n * @param {Number} width The maximum allowed width\n * @param {Number} height The maximum allowed height\n * @param {FontFace} fontFace The FontFace to to use\n * @param {Object} options Available options are:\n *   {Number} fontSize\n *   {Number} lineHeight\n *   {String} textAlign\n *   {String} color\n *   {String} backgroundColor\n */\n\n\nfunction drawText(ctx, text, x, y, width, height, fontFace, options) {\n  var textMetrics;\n  var currX = x;\n  var currY = y;\n  var currText;\n  var options = options || {};\n  options.fontSize = options.fontSize || 16;\n  options.lineHeight = options.lineHeight || 18;\n  options.textAlign = options.textAlign || 'left';\n  options.backgroundColor = options.backgroundColor || 'transparent';\n  options.color = options.color || '#000';\n  textMetrics = measureText(text, width, fontFace, options.fontSize, options.lineHeight);\n  ctx.save(); // Draw the background\n\n  if (options.backgroundColor !== 'transparent') {\n    ctx.fillStyle = options.backgroundColor;\n    ctx.fillRect(0, 0, width, height);\n  }\n\n  ctx.fillStyle = options.color;\n  ctx.font = fontFace.attributes.style + ' ' + fontFace.attributes.weight + ' ' + options.fontSize + 'px ' + fontFace.family;\n  textMetrics.lines.forEach(function (line, index) {\n    currText = line.text;\n    currY = index === 0 ? y + options.fontSize : y + options.fontSize + options.lineHeight * index; // Account for text-align: left|right|center\n\n    switch (options.textAlign) {\n      case 'center':\n        currX = x + width / 2 - line.width / 2;\n        break;\n\n      case 'right':\n        currX = x + width - line.width;\n        break;\n\n      default:\n        currX = x;\n    }\n\n    if (index < textMetrics.lines.length - 1 && options.fontSize + options.lineHeight * (index + 1) > height) {\n      currText = currText.replace(/\\,?\\s?\\w+$/, 'â€¦');\n    }\n\n    if (currY <= height + y) {\n      ctx.fillText(currText, currX, currY);\n    }\n  });\n  ctx.restore();\n}\n/**\n * Draw a linear gradient\n *\n * @param {CanvasContext} ctx\n * @param {Number} x1 gradient start-x coordinate\n * @param {Number} y1 gradient start-y coordinate\n * @param {Number} x2 gradient end-x coordinate\n * @param {Number} y2 gradient end-y coordinate\n * @param {Array} colorStops Array of {(String)color, (Number)position} values\n * @param {Number} x x-coordinate to begin fill\n * @param {Number} y y-coordinate to begin fill\n * @param {Number} width how wide to fill\n * @param {Number} height how tall to fill\n */\n\n\nfunction drawGradient(ctx, x1, y1, x2, y2, colorStops, x, y, width, height) {\n  var grad;\n  ctx.save();\n  grad = ctx.createLinearGradient(x1, y1, x2, y2);\n  colorStops.forEach(function (colorStop) {\n    grad.addColorStop(colorStop.position, colorStop.color);\n  });\n  ctx.fillStyle = grad;\n  ctx.fillRect(x, y, width, height);\n  ctx.restore();\n}\n\nmodule.exports = {\n  drawImage: drawImage,\n  drawText: drawText,\n  drawGradient: drawGradient\n};","map":{"version":3,"sources":["C:/Users/sonwonjae/react/react-tutorial/canvas-example/node_modules/react-canvas/lib/CanvasUtils.js"],"names":["FontFace","require","clamp","measureText","drawImage","ctx","image","x","y","width","height","options","backgroundColor","save","fillStyle","fillRect","restore","dx","dy","dw","dh","sx","sy","sw","sh","scale","scaledSize","actualSize","focusPoint","getWidth","getHeight","Math","max","parseFloat","toFixed","originalHeight","round","getRawImage","drawText","text","fontFace","textMetrics","currX","currY","currText","fontSize","lineHeight","textAlign","color","font","attributes","style","weight","family","lines","forEach","line","index","length","replace","fillText","drawGradient","x1","y1","x2","y2","colorStops","grad","createLinearGradient","colorStop","addColorStop","position","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar FontFace = require('./FontFace');\nvar clamp = require('./clamp');\nvar measureText = require('./measureText');\n\n/**\n * Draw an image into a <canvas>. This operation requires that the image\n * already be loaded.\n *\n * @param {CanvasContext} ctx\n * @param {Image} image The source image (from ImageCache.get())\n * @param {Number} x The x-coordinate to begin drawing\n * @param {Number} y The y-coordinate to begin drawing\n * @param {Number} width The desired width\n * @param {Number} height The desired height\n * @param {Object} options Available options are:\n *   {Number} originalWidth\n *   {Number} originalHeight\n *   {Object} focusPoint {x,y}\n *   {String} backgroundColor\n */\nfunction drawImage (ctx, image, x, y, width, height, options) {\n  options = options || {};\n\n  if (options.backgroundColor) {\n    ctx.save();\n    ctx.fillStyle = options.backgroundColor;\n    ctx.fillRect(x, y, width, height);\n    ctx.restore();\n  }\n\n  var dx = 0;\n  var dy = 0;\n  var dw = 0;\n  var dh = 0;\n  var sx = 0;\n  var sy = 0;\n  var sw = 0;\n  var sh = 0;\n  var scale;\n  var scaledSize;\n  var actualSize;\n  var focusPoint = options.focusPoint;\n\n  actualSize = {\n    width: image.getWidth(),\n    height: image.getHeight()\n  };\n\n  scale = Math.max(\n    width / actualSize.width,\n    height / actualSize.height\n  ) || 1;\n  scale = parseFloat(scale.toFixed(4), 10);\n\n  scaledSize = {\n    width: actualSize.width * scale,\n    height: actualSize.height * scale\n  };\n\n  if (focusPoint) {\n    // Since image hints are relative to image \"original\" dimensions (original != actual),\n    // use the original size for focal point cropping.\n    if (options.originalHeight) {\n      focusPoint.x *= (actualSize.height / options.originalHeight);\n      focusPoint.y *= (actualSize.height / options.originalHeight);\n    }\n  } else {\n    // Default focal point to [0.5, 0.5]\n    focusPoint = {\n      x: actualSize.width * 0.5,\n      y: actualSize.height * 0.5\n    };\n  }\n\n  // Clip the image to rectangle (sx, sy, sw, sh).\n  sx = Math.round(clamp(width * 0.5 - focusPoint.x * scale, width - scaledSize.width, 0)) * (-1 / scale);\n  sy = Math.round(clamp(height * 0.5 - focusPoint.y * scale, height - scaledSize.height, 0)) * (-1 / scale);\n  sw = Math.round(actualSize.width - (sx * 2));\n  sh = Math.round(actualSize.height - (sy * 2));\n\n  // Scale the image to dimensions (dw, dh).\n  dw = Math.round(width);\n  dh = Math.round(height);\n\n  // Draw the image on the canvas at coordinates (dx, dy).\n  dx = Math.round(x);\n  dy = Math.round(y);\n\n  ctx.drawImage(image.getRawImage(), sx, sy, sw, sh, dx, dy, dw, dh);\n}\n\n/**\n * @param {CanvasContext} ctx\n * @param {String} text The text string to render\n * @param {Number} x The x-coordinate to begin drawing\n * @param {Number} y The y-coordinate to begin drawing\n * @param {Number} width The maximum allowed width\n * @param {Number} height The maximum allowed height\n * @param {FontFace} fontFace The FontFace to to use\n * @param {Object} options Available options are:\n *   {Number} fontSize\n *   {Number} lineHeight\n *   {String} textAlign\n *   {String} color\n *   {String} backgroundColor\n */\nfunction drawText (ctx, text, x, y, width, height, fontFace, options) {\n  var textMetrics;\n  var currX = x;\n  var currY = y;\n  var currText;\n  var options = options || {};\n\n  options.fontSize = options.fontSize || 16;\n  options.lineHeight = options.lineHeight || 18;\n  options.textAlign = options.textAlign || 'left';\n  options.backgroundColor = options.backgroundColor || 'transparent';\n  options.color = options.color || '#000';\n\n  textMetrics = measureText(\n    text,\n    width,\n    fontFace,\n    options.fontSize,\n    options.lineHeight\n  );\n\n  ctx.save();\n\n  // Draw the background\n  if (options.backgroundColor !== 'transparent') {\n    ctx.fillStyle = options.backgroundColor;\n    ctx.fillRect(0, 0, width, height);\n  }\n\n  ctx.fillStyle = options.color;\n  ctx.font = fontFace.attributes.style + ' ' + fontFace.attributes.weight + ' ' + options.fontSize + 'px ' + fontFace.family;\n\n  textMetrics.lines.forEach(function (line, index) {\n    currText = line.text;\n    currY = (index === 0) ? y + options.fontSize :\n      (y + options.fontSize + options.lineHeight * index);\n\n    // Account for text-align: left|right|center\n    switch (options.textAlign) {\n      case 'center':\n        currX = x + (width / 2) - (line.width / 2);\n        break;\n      case 'right':\n        currX = x + width - line.width;\n        break;\n      default:\n        currX = x;\n    }\n\n    if ((index < textMetrics.lines.length - 1) &&\n      ((options.fontSize + options.lineHeight * (index + 1)) > height)) {\n      currText = currText.replace(/\\,?\\s?\\w+$/, 'â€¦');\n    }\n\n    if (currY <= (height + y)) {\n      ctx.fillText(currText, currX, currY);\n    }\n  });\n\n  ctx.restore();\n}\n\n/**\n * Draw a linear gradient\n *\n * @param {CanvasContext} ctx\n * @param {Number} x1 gradient start-x coordinate\n * @param {Number} y1 gradient start-y coordinate\n * @param {Number} x2 gradient end-x coordinate\n * @param {Number} y2 gradient end-y coordinate\n * @param {Array} colorStops Array of {(String)color, (Number)position} values\n * @param {Number} x x-coordinate to begin fill\n * @param {Number} y y-coordinate to begin fill\n * @param {Number} width how wide to fill\n * @param {Number} height how tall to fill\n */\nfunction drawGradient(ctx, x1, y1, x2, y2, colorStops, x, y, width, height) {\n  var grad;\n\n  ctx.save();\n  grad = ctx.createLinearGradient(x1, y1, x2, y2);\n\n  colorStops.forEach(function (colorStop) {\n    grad.addColorStop(colorStop.position, colorStop.color);\n  });\n\n  ctx.fillStyle = grad;\n  ctx.fillRect(x, y, width, height);\n  ctx.restore();\n}\n\nmodule.exports = {\n  drawImage: drawImage,\n  drawText: drawText,\n  drawGradient: drawGradient,\n};\n\n"]},"metadata":{},"sourceType":"script"}