{"ast":null,"code":"'use strict';\n\nvar EventEmitter = require('events');\n\nvar NOOP = function () {};\n\nfunction Img(src) {\n  this._originalSrc = src;\n  this._img = new Image();\n  this._img.onload = this.emit.bind(this, 'load');\n  this._img.onerror = this.emit.bind(this, 'error');\n  this._img.crossOrigin = true;\n  this._img.src = src; // The default impl of events emitter will throw on any 'error' event unless\n  // there is at least 1 handler. Logging anything in this case is unnecessary\n  // since the browser console will log it too.\n\n  this.on('error', NOOP); // Default is just 10.\n\n  this.setMaxListeners(100);\n}\n\nObject.assign(Img.prototype, EventEmitter.prototype, {\n  /**\n   * Pooling owner looks for this\n   */\n  destructor: function () {\n    // Make sure we aren't leaking callbacks.\n    this.removeAllListeners();\n  },\n\n  /**\n   * Retrieve the original image URL before browser normalization\n   *\n   * @return {String}\n   */\n  getOriginalSrc: function () {\n    return this._originalSrc;\n  },\n\n  /**\n   * Retrieve a reference to the underyling <img> node.\n   *\n   * @return {HTMLImageElement}\n   */\n  getRawImage: function () {\n    return this._img;\n  },\n\n  /**\n   * Retrieve the loaded image width\n   *\n   * @return {Number}\n   */\n  getWidth: function () {\n    return this._img.naturalWidth;\n  },\n\n  /**\n   * Retrieve the loaded image height\n   *\n   * @return {Number}\n   */\n  getHeight: function () {\n    return this._img.naturalHeight;\n  },\n\n  /**\n   * @return {Bool}\n   */\n  isLoaded: function () {\n    return this._img.naturalHeight > 0;\n  }\n});\nvar kInstancePoolLength = 300;\nvar _instancePool = {\n  length: 0,\n  // Keep all the nodes in memory.\n  elements: {},\n  // Push with 0 frequency\n  push: function (hash, data) {\n    this.length++;\n    this.elements[hash] = {\n      hash: hash,\n      // Helps identifying \n      freq: 0,\n      data: data\n    };\n  },\n  get: function (path) {\n    var element = this.elements[path];\n\n    if (element) {\n      element.freq++;\n      return element.data;\n    }\n\n    return null;\n  },\n  // used to explicitely remove the path\n  removeElement: function (path) {\n    // Now almighty GC can claim this soul\n    var element = this.elements[path];\n    delete this.elements[path];\n    this.length--;\n    return element;\n  },\n  _reduceLeastUsed: function (least, currentHash) {\n    var current = _instancePool.elements[currentHash];\n\n    if (least.freq > current.freq) {\n      return current;\n    }\n\n    return least;\n  },\n  popLeastUsed: function () {\n    var reducer = _instancePool._reduceLeastUsed;\n    var minUsed = Object.keys(this.elements).reduce(reducer, {\n      freq: Infinity\n    });\n\n    if (minUsed.hash) {\n      return this.removeElement(minUsed.hash);\n    }\n\n    return null;\n  }\n};\nvar ImageCache = {\n  /**\n   * Retrieve an image from the cache\n   *\n   * @return {Img}\n   */\n  get: function (src) {\n    var image = _instancePool.get(src);\n\n    if (!image) {\n      // Awesome LRU\n      image = new Img(src);\n\n      if (_instancePool.length >= kInstancePoolLength) {\n        _instancePool.popLeastUsed().destructor();\n      }\n\n      _instancePool.push(image.getOriginalSrc(), image);\n    }\n\n    return image;\n  }\n};\nmodule.exports = ImageCache;","map":{"version":3,"sources":["C:/Users/sonwonjae/react/react-tutorial/canvas-example/node_modules/react-canvas/lib/ImageCache.js"],"names":["EventEmitter","require","NOOP","Img","src","_originalSrc","_img","Image","onload","emit","bind","onerror","crossOrigin","on","setMaxListeners","Object","assign","prototype","destructor","removeAllListeners","getOriginalSrc","getRawImage","getWidth","naturalWidth","getHeight","naturalHeight","isLoaded","kInstancePoolLength","_instancePool","length","elements","push","hash","data","freq","get","path","element","removeElement","_reduceLeastUsed","least","currentHash","current","popLeastUsed","reducer","minUsed","keys","reduce","Infinity","ImageCache","image","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar EventEmitter = require('events');\n\nvar NOOP = function () {};\n\nfunction Img (src) {\n  this._originalSrc = src;\n  this._img = new Image();\n  this._img.onload = this.emit.bind(this, 'load');\n  this._img.onerror = this.emit.bind(this, 'error');\n  this._img.crossOrigin = true;\n  this._img.src = src;\n\n  // The default impl of events emitter will throw on any 'error' event unless\n  // there is at least 1 handler. Logging anything in this case is unnecessary\n  // since the browser console will log it too.\n  this.on('error', NOOP);\n\n  // Default is just 10.\n  this.setMaxListeners(100);\n}\n\nObject.assign(Img.prototype, EventEmitter.prototype, {\n\n  /**\n   * Pooling owner looks for this\n   */\n  destructor: function () {\n    // Make sure we aren't leaking callbacks.\n    this.removeAllListeners();\n  },\n\n  /**\n   * Retrieve the original image URL before browser normalization\n   *\n   * @return {String}\n   */\n  getOriginalSrc: function () {\n    return this._originalSrc;\n  },\n\n  /**\n   * Retrieve a reference to the underyling <img> node.\n   *\n   * @return {HTMLImageElement}\n   */\n  getRawImage: function () {\n    return this._img;\n  },\n\n  /**\n   * Retrieve the loaded image width\n   *\n   * @return {Number}\n   */\n  getWidth: function () {\n    return this._img.naturalWidth;\n  },\n\n  /**\n   * Retrieve the loaded image height\n   *\n   * @return {Number}\n   */\n  getHeight: function () {\n    return this._img.naturalHeight;\n  },\n\n  /**\n   * @return {Bool}\n   */\n  isLoaded: function () {\n    return this._img.naturalHeight > 0;\n  }\n\n});\n\nvar kInstancePoolLength = 300;\n\nvar _instancePool = {\n  length: 0,\n  // Keep all the nodes in memory.\n  elements: {\n    \n  },\n  \n  // Push with 0 frequency\n  push: function (hash, data) {\n    this.length++;\n    this.elements[hash] = {\n      hash: hash, // Helps identifying \n      freq: 0,\n      data: data\n    };\n  },\n  \n  get: function (path) {\n    var element = this.elements[path];\n    \n    if( element ){\n      element.freq++;\n      return element.data;\n    }\n    \n    return null;\n  },\n  \n  // used to explicitely remove the path\n  removeElement: function (path) {\n    // Now almighty GC can claim this soul\n    var element = this.elements[path];\n    delete this.elements[path];\n    this.length--;\n    return element;\n  },\n  \n  _reduceLeastUsed: function (least, currentHash) {\n    var current = _instancePool.elements[currentHash];\n    \n    if( least.freq > current.freq ){\n      return current;\n    }\n    \n    return least;\n  },\n  \n  popLeastUsed: function () {\n    var reducer = _instancePool._reduceLeastUsed;\n    var minUsed = Object.keys(this.elements).reduce(reducer, { freq: Infinity });\n    \n    if( minUsed.hash ){\n      return this.removeElement(minUsed.hash);  \n    }\n    \n    return null;\n  }\n};\n\nvar ImageCache = {\n\n  /**\n   * Retrieve an image from the cache\n   *\n   * @return {Img}\n   */\n  get: function (src) {\n    var image = _instancePool.get(src);\n    if (!image) {\n      // Awesome LRU\n      image = new Img(src);\n      if (_instancePool.length >= kInstancePoolLength) {\n        _instancePool.popLeastUsed().destructor();\n      }\n      _instancePool.push(image.getOriginalSrc(), image);\n    }\n    return image;\n  }\n\n};\n\nmodule.exports = ImageCache;\n"]},"metadata":{},"sourceType":"script"}