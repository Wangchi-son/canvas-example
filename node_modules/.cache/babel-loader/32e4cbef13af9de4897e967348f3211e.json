{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sonwonjae\\\\react\\\\react-tutorial\\\\canvas-example\\\\src\\\\three\\\\ThreeTuto2.js\";\nimport React, { Component } from 'react';\nimport * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols';\nimport * as dat from 'dat.gui';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class ThreeTuto2 extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.animate = () => {\n      this.renderer.render(this.scene, this.camera);\n      requestAnimationFrame(this.animate);\n      this.raycaster.setFromCamera(this.mouse, this.camera);\n      const intersects = this.raycaster.intersectObject(this.planeMesh);\n    };\n  }\n\n  componentDidMount() {\n    const width = window.innerWidth - 1;\n    const height = window.innerHeight - 1; //raycaster 추가\n\n    const raycaster = new THREE.Raycaster(); // 카메라로 찍으려는 3D무대\n\n    const scene = new THREE.Scene(); // 카메라\n\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000); // 플레이어 or 영사기\n\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(width, height); // 픽셀단위로 진하게 해줌\n\n    renderer.setPixelRatio(devicePixelRatio); // HTML canvas\n\n    this.element.appendChild(renderer.domElement); // PlanveGeometry\n\n    const planeGeometry = new THREE.PlaneGeometry(10, 10, 10, 10);\n    const planeMeterial = new THREE.MeshPhongMaterial({\n      color: 0xff0000,\n      side: THREE.DoubleSide,\n      flatShading: THREE.FlatShading\n    });\n    const planeMesh = new THREE.Mesh(planeGeometry, planeMeterial);\n    scene.add(planeMesh); //GUI\n\n    const gui = new dat.GUI();\n    const world = {\n      plane: {\n        width: 10,\n        height: 10,\n        widthSegments: 10,\n        heightSegments: 10\n      }\n    }; // x값 조정하는 GUI\n\n    gui.add(world.plane, 'width', 1, 20).onChange(generatePlane); // y값 조정하는 GUI\n\n    gui.add(world.plane, 'height', 1, 20).onChange(generatePlane); // x seg값 조정하는 GUI\n\n    gui.add(world.plane, 'widthSegments', 1, 100).onChange(generatePlane); // y seg값 조정하는 GUI\n\n    gui.add(world.plane, 'heightSegments', 1, 100).onChange(generatePlane);\n\n    function generatePlane() {\n      planeMesh.geometry.dispose();\n      planeMesh.geometry = new THREE.PlaneGeometry(world.plane.width, world.plane.height, world.plane.widthSegments, world.plane.heightSegments);\n      const {\n        array\n      } = planeMesh.geometry.attributes.position;\n\n      for (let i = 0; i < array.length; i += 3) {\n        const x = array[i];\n        const y = array[i + 1];\n        const z = array[i + 2];\n        array[i + 2] = z + Math.random();\n      }\n    } // x,y,z값 조정 방법\n\n\n    const {\n      array\n    } = planeMesh.geometry.attributes.position;\n\n    for (let i = 0; i < array.length; i += 3) {\n      const x = array[i];\n      const y = array[i + 1];\n      const z = array[i + 2];\n      array[i + 2] = z + Math.random();\n    } // 빛\n\n\n    const light = new THREE.DirectionalLight(0xffffff, 1);\n    light.position.set(0, 0, 1);\n    scene.add(light); // 뒤쪽 빛\n\n    const backLight = new THREE.DirectionalLight(0xffffff, 1);\n    backLight.position.set(0, 0, -1);\n    scene.add(backLight); // OrbitControls\n\n    new OrbitControls(camera, renderer.domElement); // 카메라 뷰 깊이\n\n    camera.position.z = 5;\n    const mouse = {\n      x: undefined,\n      y: undefined\n    };\n    window.addEventListener('mousemove', e => {\n      mouse.x = e.clientX / window.innerWidth * 2 - 1;\n      mouse.y = -(e.clientY / window.innerHeight) * 2 + 1;\n      console.log(mouse);\n    });\n    this.scene = scene;\n    this.camera = camera;\n    this.renderer = renderer;\n    this.planeMesh = planeMesh;\n    this.mouse = mouse;\n    this.raycaster = raycaster;\n    this.animate();\n  } // 첫 줄은 카메라 뷰로 렌더링하겠다\n  // 다음 두 줄은 3D박스를 x,y축으로 0.01씩 이동하겠다\n  // 마지막 requestAnimationFrame 함수는 this.animate함수를 계속 호출하라는 뜻\n  // 최대 1ms (1초에 60번씩 그려라) => 성능이 낮은 PC나 CPU/GPU 점유율에 따라 동적으로 변하기도 함\n\n\n  render() {\n    // 마우스 무브 움직임 추가\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: el => this.element = el\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 12\n    }, this);\n  }\n\n}\nexport default ThreeTuto2;","map":{"version":3,"sources":["C:/Users/sonwonjae/react/react-tutorial/canvas-example/src/three/ThreeTuto2.js"],"names":["React","Component","THREE","OrbitControls","dat","ThreeTuto2","animate","renderer","render","scene","camera","requestAnimationFrame","raycaster","setFromCamera","mouse","intersects","intersectObject","planeMesh","componentDidMount","width","window","innerWidth","height","innerHeight","Raycaster","Scene","PerspectiveCamera","WebGLRenderer","setSize","setPixelRatio","devicePixelRatio","element","appendChild","domElement","planeGeometry","PlaneGeometry","planeMeterial","MeshPhongMaterial","color","side","DoubleSide","flatShading","FlatShading","Mesh","add","gui","GUI","world","plane","widthSegments","heightSegments","onChange","generatePlane","geometry","dispose","array","attributes","position","i","length","x","y","z","Math","random","light","DirectionalLight","set","backLight","undefined","addEventListener","e","clientX","clientY","console","log","el"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport * as THREE from 'three';\r\nimport OrbitControls from 'three-orbitcontrols';\r\n\r\nimport * as dat from 'dat.gui';\r\n\r\nexport class ThreeTuto2 extends Component {\r\n  componentDidMount() {\r\n    const width = window.innerWidth - 1;\r\n    const height = window.innerHeight - 1;\r\n\r\n    //raycaster 추가\r\n    const raycaster = new THREE.Raycaster();\r\n\r\n    // 카메라로 찍으려는 3D무대\r\n    const scene = new THREE.Scene();\r\n\r\n    // 카메라\r\n    const camera = new THREE.PerspectiveCamera(\r\n      75,\r\n      window.innerWidth / window.innerHeight,\r\n      0.1,\r\n      1000\r\n    );\r\n\r\n    // 플레이어 or 영사기\r\n    const renderer = new THREE.WebGLRenderer();\r\n    renderer.setSize(width, height);\r\n\r\n    // 픽셀단위로 진하게 해줌\r\n    renderer.setPixelRatio(devicePixelRatio);\r\n\r\n    // HTML canvas\r\n    this.element.appendChild(renderer.domElement);\r\n\r\n    // PlanveGeometry\r\n    const planeGeometry = new THREE.PlaneGeometry(10, 10, 10, 10);\r\n    const planeMeterial = new THREE.MeshPhongMaterial({\r\n      color: 0xff0000,\r\n      side: THREE.DoubleSide,\r\n      flatShading: THREE.FlatShading\r\n    });\r\n    const planeMesh = new THREE.Mesh(planeGeometry, planeMeterial);\r\n    scene.add(planeMesh);\r\n\r\n    //GUI\r\n    const gui = new dat.GUI();\r\n    const world = {\r\n      plane: {\r\n        width: 10,\r\n        height: 10,\r\n        widthSegments: 10,\r\n        heightSegments: 10\r\n      }\r\n    };\r\n\r\n    // x값 조정하는 GUI\r\n    gui.add(world.plane, 'width', 1, 20).onChange(generatePlane);\r\n\r\n    // y값 조정하는 GUI\r\n    gui.add(world.plane, 'height', 1, 20).onChange(generatePlane);\r\n\r\n    // x seg값 조정하는 GUI\r\n    gui.add(world.plane, 'widthSegments', 1, 100).onChange(generatePlane);\r\n\r\n    // y seg값 조정하는 GUI\r\n    gui.add(world.plane, 'heightSegments', 1, 100).onChange(generatePlane);\r\n\r\n    function generatePlane() {\r\n      planeMesh.geometry.dispose();\r\n      planeMesh.geometry = new THREE.PlaneGeometry(\r\n        world.plane.width,\r\n        world.plane.height,\r\n        world.plane.widthSegments,\r\n        world.plane.heightSegments\r\n      );\r\n      const { array } = planeMesh.geometry.attributes.position;\r\n      for (let i = 0; i < array.length; i += 3) {\r\n        const x = array[i];\r\n        const y = array[i + 1];\r\n        const z = array[i + 2];\r\n\r\n        array[i + 2] = z + Math.random();\r\n      }\r\n    }\r\n    // x,y,z값 조정 방법\r\n    const { array } = planeMesh.geometry.attributes.position;\r\n    for (let i = 0; i < array.length; i += 3) {\r\n      const x = array[i];\r\n      const y = array[i + 1];\r\n      const z = array[i + 2];\r\n\r\n      array[i + 2] = z + Math.random();\r\n    }\r\n\r\n    // 빛\r\n    const light = new THREE.DirectionalLight(0xffffff, 1);\r\n    light.position.set(0, 0, 1);\r\n    scene.add(light);\r\n\r\n    // 뒤쪽 빛\r\n    const backLight = new THREE.DirectionalLight(0xffffff, 1);\r\n    backLight.position.set(0, 0, -1);\r\n    scene.add(backLight);\r\n\r\n    // OrbitControls\r\n    new OrbitControls(camera, renderer.domElement);\r\n\r\n    // 카메라 뷰 깊이\r\n    camera.position.z = 5;\r\n\r\n    const mouse = {\r\n      x: undefined,\r\n      y: undefined\r\n    };\r\n\r\n    window.addEventListener('mousemove', (e) => {\r\n      mouse.x = (e.clientX / window.innerWidth) * 2 - 1;\r\n      mouse.y = -(e.clientY / window.innerHeight) * 2 + 1;\r\n\r\n      console.log(mouse);\r\n    });\r\n\r\n    this.scene = scene;\r\n    this.camera = camera;\r\n    this.renderer = renderer;\r\n    this.planeMesh = planeMesh;\r\n\r\n    this.mouse = mouse;\r\n    this.raycaster = raycaster;\r\n    this.animate();\r\n  }\r\n\r\n  // 첫 줄은 카메라 뷰로 렌더링하겠다\r\n  // 다음 두 줄은 3D박스를 x,y축으로 0.01씩 이동하겠다\r\n  // 마지막 requestAnimationFrame 함수는 this.animate함수를 계속 호출하라는 뜻\r\n  // 최대 1ms (1초에 60번씩 그려라) => 성능이 낮은 PC나 CPU/GPU 점유율에 따라 동적으로 변하기도 함\r\n\r\n  animate = () => {\r\n    this.renderer.render(this.scene, this.camera);\r\n    requestAnimationFrame(this.animate);\r\n\r\n    this.raycaster.setFromCamera(this.mouse, this.camera);\r\n    const intersects = this.raycaster.intersectObject(this.planeMesh);\r\n  };\r\n\r\n  render() {\r\n    // 마우스 무브 움직임 추가\r\n\r\n    return <div ref={(el) => (this.element = el)}></div>;\r\n  }\r\n}\r\n\r\nexport default ThreeTuto2;\r\n"]},"metadata":{},"sourceType":"module"}