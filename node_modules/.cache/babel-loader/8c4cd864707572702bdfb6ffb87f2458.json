{"ast":null,"code":"import { createClass, DOM as dom, PropTypes as propTypes } from 'react';\nexport default createClass({\n  displayName: 'BlotterRow',\n  propTypes: {\n    columnConfig: propTypes.object.isRequired,\n    data: propTypes.object,\n    formatRow: propTypes.func\n  },\n\n  render() {\n    const p = this.props;\n    const data = p.formatRow ? p.formatRow(p.data) : p.data;\n    const tds = [];\n    Object.keys(p.columnConfig).forEach((col, index) => {\n      const c = p.columnConfig[col];\n\n      if (!c.columns) {\n        const val = c.markup ? c.markup.bind(this)(data, p) : data[col];\n        tds.push(dom.td({\n          key: index,\n          className: c.className\n        }, val));\n      } else {\n        Object.keys(c.columns).forEach((dataCol, subIndex) => {\n          const dataColConfig = c.columns[dataCol];\n          const val = dataColConfig.markup ? dataColConfig.markup.bind(this)(data, p) : data[col][dataCol];\n          tds.push(dom.td({\n            key: `${index}.${subIndex}`,\n            className: dataColConfig.className\n          }, val));\n        });\n      }\n    });\n    let rowConfig = null;\n\n    if (data.rowClassName) {\n      rowConfig = {\n        className: data.rowClassName\n      };\n    }\n\n    return dom.tr(rowConfig, tds);\n  }\n\n});","map":{"version":3,"sources":["C:/Users/sonwonjae/react/react-tutorial/canvas-example/node_modules/blotter/lib/data-row.js"],"names":["createClass","DOM","dom","PropTypes","propTypes","displayName","columnConfig","object","isRequired","data","formatRow","func","render","p","props","tds","Object","keys","forEach","col","index","c","columns","val","markup","bind","push","td","key","className","dataCol","subIndex","dataColConfig","rowConfig","rowClassName","tr"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,GAAG,IAAIC,GAA7B,EAAkCC,SAAS,IAAIC,SAA/C,QAAgE,OAAhE;AAEA,eAAeJ,WAAW,CAAC;AACzBK,EAAAA,WAAW,EAAE,YADY;AAEzBD,EAAAA,SAAS,EAAE;AACTE,IAAAA,YAAY,EAAEF,SAAS,CAACG,MAAV,CAAiBC,UADtB;AAETC,IAAAA,IAAI,EAAEL,SAAS,CAACG,MAFP;AAGTG,IAAAA,SAAS,EAAEN,SAAS,CAACO;AAHZ,GAFc;;AAOzBC,EAAAA,MAAM,GAAG;AACP,UAAMC,CAAC,GAAG,KAAKC,KAAf;AACA,UAAML,IAAI,GAAGI,CAAC,CAACH,SAAF,GAAcG,CAAC,CAACH,SAAF,CAAYG,CAAC,CAACJ,IAAd,CAAd,GAAoCI,CAAC,CAACJ,IAAnD;AACA,UAAMM,GAAG,GAAG,EAAZ;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYJ,CAAC,CAACP,YAAd,EAA4BY,OAA5B,CAAoC,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAClD,YAAMC,CAAC,GAAGR,CAAC,CAACP,YAAF,CAAea,GAAf,CAAV;;AAEA,UAAI,CAACE,CAAC,CAACC,OAAP,EAAgB;AACd,cAAMC,GAAG,GAAGF,CAAC,CAACG,MAAF,GAAWH,CAAC,CAACG,MAAF,CAASC,IAAT,CAAc,IAAd,EAAoBhB,IAApB,EAA0BI,CAA1B,CAAX,GAA0CJ,IAAI,CAACU,GAAD,CAA1D;AACAJ,QAAAA,GAAG,CAACW,IAAJ,CAASxB,GAAG,CAACyB,EAAJ,CAAO;AAAEC,UAAAA,GAAG,EAAER,KAAP;AAAcS,UAAAA,SAAS,EAAER,CAAC,CAACQ;AAA3B,SAAP,EAA+CN,GAA/C,CAAT;AACD,OAHD,MAGO;AACLP,QAAAA,MAAM,CAACC,IAAP,CAAYI,CAAC,CAACC,OAAd,EAAuBJ,OAAvB,CAA+B,CAACY,OAAD,EAAUC,QAAV,KAAuB;AACpD,gBAAMC,aAAa,GAAGX,CAAC,CAACC,OAAF,CAAUQ,OAAV,CAAtB;AACA,gBAAMP,GAAG,GAAGS,aAAa,CAACR,MAAd,GACRQ,aAAa,CAACR,MAAd,CAAqBC,IAArB,CAA0B,IAA1B,EAAgChB,IAAhC,EAAsCI,CAAtC,CADQ,GACmCJ,IAAI,CAACU,GAAD,CAAJ,CAAUW,OAAV,CAD/C;AAEAf,UAAAA,GAAG,CAACW,IAAJ,CAASxB,GAAG,CAACyB,EAAJ,CAAO;AACdC,YAAAA,GAAG,EAAG,GAAER,KAAM,IAAGW,QAAS,EADZ;AAEdF,YAAAA,SAAS,EAAEG,aAAa,CAACH;AAFX,WAAP,EAGNN,GAHM,CAAT;AAID,SARD;AASD;AAEF,KAlBD;AAoBA,QAAIU,SAAS,GAAG,IAAhB;;AACA,QAAIxB,IAAI,CAACyB,YAAT,EAAuB;AACrBD,MAAAA,SAAS,GAAG;AACVJ,QAAAA,SAAS,EAAEpB,IAAI,CAACyB;AADN,OAAZ;AAGD;;AACD,WACEhC,GAAG,CAACiC,EAAJ,CAAOF,SAAP,EAAkBlB,GAAlB,CADF;AAGD;;AAxCwB,CAAD,CAA1B","sourcesContent":["import { createClass, DOM as dom, PropTypes as propTypes } from 'react';\n\nexport default createClass({\n  displayName: 'BlotterRow',\n  propTypes: {\n    columnConfig: propTypes.object.isRequired,\n    data: propTypes.object,\n    formatRow: propTypes.func\n  },\n  render() {\n    const p = this.props;\n    const data = p.formatRow ? p.formatRow(p.data) : p.data;\n    const tds = [];\n    Object.keys(p.columnConfig).forEach((col, index) => {\n      const c = p.columnConfig[col];\n\n      if (!c.columns) {\n        const val = c.markup ? c.markup.bind(this)(data, p) : data[col];\n        tds.push(dom.td({ key: index, className: c.className }, val));\n      } else {\n        Object.keys(c.columns).forEach((dataCol, subIndex) => {\n          const dataColConfig = c.columns[dataCol];\n          const val = dataColConfig.markup\n            ? dataColConfig.markup.bind(this)(data, p) : data[col][dataCol];\n          tds.push(dom.td({\n            key: `${index}.${subIndex}`,\n            className: dataColConfig.className\n          }, val));\n        });\n      }\n\n    });\n\n    let rowConfig = null;\n    if (data.rowClassName) {\n      rowConfig = {\n        className: data.rowClassName\n      };\n    }\n    return (\n      dom.tr(rowConfig, tds)\n    );\n  }\n});\n"]},"metadata":{},"sourceType":"module"}