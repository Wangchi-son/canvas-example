{"ast":null,"code":"'use strict';\n\nvar FontFace = require('./FontFace');\n\nvar _useNativeImpl = typeof window.FontFace !== 'undefined';\n\nvar _pendingFonts = {};\nvar _loadedFonts = {};\nvar _failedFonts = {};\nvar kFontLoadTimeout = 3000;\n/**\n * Check if a font face has loaded\n * @param {FontFace} fontFace\n * @return {Boolean}\n */\n\nfunction isFontLoaded(fontFace) {\n  // For remote URLs, check the cache. System fonts (sans url) assume loaded.\n  return _loadedFonts[fontFace.id] !== undefined || !fontFace.url;\n}\n/**\n * Load a remote font and execute a callback.\n * @param {FontFace} fontFace The font to Load\n * @param {Function} callback Function executed upon font Load\n */\n\n\nfunction loadFont(fontFace, callback) {\n  var defaultNode;\n  var testNode;\n  var checkFont; // See if we've previously loaded it.\n\n  if (_loadedFonts[fontFace.id]) {\n    return callback(null);\n  } // See if we've previously failed to load it.\n\n\n  if (_failedFonts[fontFace.id]) {\n    return callback(_failedFonts[fontFace.id]);\n  } // System font: assume already loaded.\n\n\n  if (!fontFace.url) {\n    return callback(null);\n  } // Font load is already in progress:\n\n\n  if (_pendingFonts[fontFace.id]) {\n    _pendingFonts[fontFace.id].callbacks.push(callback);\n\n    return;\n  } // Create the test <span>'s for measuring.\n\n\n  defaultNode = createTestNode('Helvetica', fontFace.attributes);\n  testNode = createTestNode(fontFace.family, fontFace.attributes);\n  document.body.appendChild(testNode);\n  document.body.appendChild(defaultNode);\n  _pendingFonts[fontFace.id] = {\n    startTime: Date.now(),\n    defaultNode: defaultNode,\n    testNode: testNode,\n    callbacks: [callback]\n  }; // Font watcher\n\n  checkFont = function () {\n    var currWidth = testNode.getBoundingClientRect().width;\n    var defaultWidth = defaultNode.getBoundingClientRect().width;\n    var loaded = currWidth !== defaultWidth;\n\n    if (loaded) {\n      handleFontLoad(fontFace, null);\n    } else {\n      // Timeout?\n      if (Date.now() - _pendingFonts[fontFace.id].startTime >= kFontLoadTimeout) {\n        handleFontLoad(fontFace, true);\n      } else {\n        requestAnimationFrame(checkFont);\n      }\n    }\n  }; // Start watching\n\n\n  checkFont();\n} // Internal\n// ========\n\n/**\n * Native FontFace loader implementation\n * @internal\n */\n\n\nfunction loadFontNative(fontFace, callback) {\n  var theFontFace; // See if we've previously loaded it.\n\n  if (_loadedFonts[fontFace.id]) {\n    return callback(null);\n  } // See if we've previously failed to load it.\n\n\n  if (_failedFonts[fontFace.id]) {\n    return callback(_failedFonts[fontFace.id]);\n  } // System font: assume it's installed.\n\n\n  if (!fontFace.url) {\n    return callback(null);\n  } // Font load is already in progress:\n\n\n  if (_pendingFonts[fontFace.id]) {\n    _pendingFonts[fontFace.id].callbacks.push(callback);\n\n    return;\n  }\n\n  _pendingFonts[fontFace.id] = {\n    startTime: Date.now(),\n    callbacks: [callback]\n  }; // Use font loader API\n\n  theFontFace = new window.FontFace(fontFace.family, 'url(' + fontFace.url + ')', fontFace.attributes);\n  theFontFace.load().then(function () {\n    _loadedFonts[fontFace.id] = true;\n    callback(null);\n  }, function (err) {\n    _failedFonts[fontFace.id] = err;\n    callback(err);\n  });\n}\n/**\n * Helper method for created a hidden <span> with a given font.\n * Uses TypeKit's default test string, which is said to result\n * in highly varied measured widths when compared to the default font.\n * @internal\n */\n\n\nfunction createTestNode(family, attributes) {\n  var span = document.createElement('span');\n  span.setAttribute('data-fontfamily', family);\n  span.style.cssText = 'position:absolute; left:-5000px; top:-5000px; visibility:hidden;' + 'font-size:100px; font-family:\"' + family + '\", Helvetica;font-weight: ' + attributes.weight + ';' + 'font-style:' + attributes.style + ';';\n  span.innerHTML = 'BESs';\n  return span;\n}\n/**\n * @internal\n */\n\n\nfunction handleFontLoad(fontFace, timeout) {\n  var error = timeout ? 'Exceeded load timeout of ' + kFontLoadTimeout + 'ms' : null;\n\n  if (!error) {\n    _loadedFonts[fontFace.id] = true;\n  } else {\n    _failedFonts[fontFace.id] = error;\n  } // Execute pending callbacks.\n\n\n  _pendingFonts[fontFace.id].callbacks.forEach(function (callback) {\n    callback(error);\n  }); // Clean up DOM\n\n\n  if (_pendingFonts[fontFace.id].defaultNode) {\n    document.body.removeChild(_pendingFonts[fontFace.id].defaultNode);\n  }\n\n  if (_pendingFonts[fontFace.id].testNode) {\n    document.body.removeChild(_pendingFonts[fontFace.id].testNode);\n  } // Clean up waiting queue\n\n\n  delete _pendingFonts[fontFace.id];\n}\n\nmodule.exports = {\n  isFontLoaded: isFontLoaded,\n  loadFont: _useNativeImpl ? loadFontNative : loadFont\n};","map":{"version":3,"sources":["C:/Users/sonwonjae/react/react-tutorial/canvas-example/node_modules/react-canvas/lib/FontUtils.js"],"names":["FontFace","require","_useNativeImpl","window","_pendingFonts","_loadedFonts","_failedFonts","kFontLoadTimeout","isFontLoaded","fontFace","id","undefined","url","loadFont","callback","defaultNode","testNode","checkFont","callbacks","push","createTestNode","attributes","family","document","body","appendChild","startTime","Date","now","currWidth","getBoundingClientRect","width","defaultWidth","loaded","handleFontLoad","requestAnimationFrame","loadFontNative","theFontFace","load","then","err","span","createElement","setAttribute","style","cssText","weight","innerHTML","timeout","error","forEach","removeChild","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar FontFace = require('./FontFace');\n\nvar _useNativeImpl = (typeof window.FontFace !== 'undefined');\nvar _pendingFonts = {};\nvar _loadedFonts = {};\nvar _failedFonts = {};\n\nvar kFontLoadTimeout = 3000;\n\n/**\n * Check if a font face has loaded\n * @param {FontFace} fontFace\n * @return {Boolean}\n */\nfunction isFontLoaded (fontFace) {\n  // For remote URLs, check the cache. System fonts (sans url) assume loaded.\n  return _loadedFonts[fontFace.id] !== undefined || !fontFace.url;\n}\n\n/**\n * Load a remote font and execute a callback.\n * @param {FontFace} fontFace The font to Load\n * @param {Function} callback Function executed upon font Load\n */\nfunction loadFont (fontFace, callback) {\n  var defaultNode;\n  var testNode;\n  var checkFont;\n\n  // See if we've previously loaded it.\n  if (_loadedFonts[fontFace.id]) {\n    return callback(null);\n  }\n\n  // See if we've previously failed to load it.\n  if (_failedFonts[fontFace.id]) {\n    return callback(_failedFonts[fontFace.id]);\n  }\n\n  // System font: assume already loaded.\n  if (!fontFace.url) {\n    return callback(null);\n  }\n\n  // Font load is already in progress:\n  if (_pendingFonts[fontFace.id]) {\n    _pendingFonts[fontFace.id].callbacks.push(callback);\n    return;\n  }\n\n  // Create the test <span>'s for measuring.\n  defaultNode = createTestNode('Helvetica', fontFace.attributes);\n  testNode = createTestNode(fontFace.family, fontFace.attributes);\n  document.body.appendChild(testNode);\n  document.body.appendChild(defaultNode);\n\n  _pendingFonts[fontFace.id] = {\n    startTime: Date.now(),\n    defaultNode: defaultNode,\n    testNode: testNode,\n    callbacks: [callback]\n  };\n\n  // Font watcher\n  checkFont = function () {\n    var currWidth = testNode.getBoundingClientRect().width;\n    var defaultWidth = defaultNode.getBoundingClientRect().width;\n    var loaded = currWidth !== defaultWidth;\n\n    if (loaded) {\n      handleFontLoad(fontFace, null);\n    } else {\n      // Timeout?\n      if (Date.now() - _pendingFonts[fontFace.id].startTime >= kFontLoadTimeout) {\n        handleFontLoad(fontFace, true);\n      } else {\n        requestAnimationFrame(checkFont);\n      }\n    }\n  };\n\n  // Start watching\n  checkFont();\n}\n\n// Internal\n// ========\n\n/**\n * Native FontFace loader implementation\n * @internal\n */\nfunction loadFontNative (fontFace, callback) {\n  var theFontFace;\n\n  // See if we've previously loaded it.\n  if (_loadedFonts[fontFace.id]) {\n    return callback(null);\n  }\n\n  // See if we've previously failed to load it.\n  if (_failedFonts[fontFace.id]) {\n    return callback(_failedFonts[fontFace.id]);\n  }\n\n  // System font: assume it's installed.\n  if (!fontFace.url) {\n    return callback(null);\n  }\n\n  // Font load is already in progress:\n  if (_pendingFonts[fontFace.id]) {\n    _pendingFonts[fontFace.id].callbacks.push(callback);\n    return;\n  }\n\n  _pendingFonts[fontFace.id] = {\n    startTime: Date.now(),\n    callbacks: [callback]\n  };\n\n  // Use font loader API\n  theFontFace = new window.FontFace(fontFace.family,\n    'url(' + fontFace.url + ')', fontFace.attributes);\n\n  theFontFace.load().then(function () {\n    _loadedFonts[fontFace.id] = true;\n    callback(null);\n  }, function (err) {\n    _failedFonts[fontFace.id] = err;\n    callback(err);\n  });\n}\n\n/**\n * Helper method for created a hidden <span> with a given font.\n * Uses TypeKit's default test string, which is said to result\n * in highly varied measured widths when compared to the default font.\n * @internal\n */\nfunction createTestNode (family, attributes) {\n  var span = document.createElement('span');\n  span.setAttribute('data-fontfamily', family);\n  span.style.cssText = 'position:absolute; left:-5000px; top:-5000px; visibility:hidden;' +\n    'font-size:100px; font-family:\"' + family + '\", Helvetica;font-weight: ' + attributes.weight + ';' +\n    'font-style:' + attributes.style + ';';\n  span.innerHTML = 'BESs';\n  return span;\n}\n\n/**\n * @internal\n */\nfunction handleFontLoad (fontFace, timeout) {\n  var error = timeout ? 'Exceeded load timeout of ' + kFontLoadTimeout + 'ms' : null;\n\n  if (!error) {\n    _loadedFonts[fontFace.id] = true;\n  } else {\n    _failedFonts[fontFace.id] = error;\n  }\n\n  // Execute pending callbacks.\n  _pendingFonts[fontFace.id].callbacks.forEach(function (callback) {\n    callback(error);\n  });\n\n  // Clean up DOM\n  if (_pendingFonts[fontFace.id].defaultNode) {\n    document.body.removeChild(_pendingFonts[fontFace.id].defaultNode);\n  }\n  if (_pendingFonts[fontFace.id].testNode) {\n    document.body.removeChild(_pendingFonts[fontFace.id].testNode);\n  }\n\n  // Clean up waiting queue\n  delete _pendingFonts[fontFace.id];\n}\n\nmodule.exports = {\n  isFontLoaded: isFontLoaded,\n  loadFont: _useNativeImpl ? loadFontNative : loadFont\n};\n"]},"metadata":{},"sourceType":"script"}