{"ast":null,"code":"'use strict';\n\nvar FrameUtils = require('./FrameUtils');\n\nvar EventTypes = require('./EventTypes');\n/**\n * RenderLayer hit testing\n *\n * @param {Event} e\n * @param {RenderLayer} rootLayer\n * @param {?HTMLElement} rootNode\n * @return {RenderLayer}\n */\n\n\nfunction hitTest(e, rootLayer, rootNode) {\n  var touch = e.touches ? e.touches[0] : e;\n  var touchX = touch.pageX;\n  var touchY = touch.pageY;\n  var rootNodeBox;\n\n  if (rootNode) {\n    rootNodeBox = rootNode.getBoundingClientRect();\n    touchX -= rootNodeBox.left;\n    touchY -= rootNodeBox.top;\n  }\n\n  touchY = touchY - window.pageYOffset;\n  touchX = touchX - window.pageXOffset;\n  return getLayerAtPoint(rootLayer, e.type, FrameUtils.make(touchX, touchY, 1, 1), rootLayer.translateX || 0, rootLayer.translateY || 0);\n}\n/**\n * @private\n */\n\n\nfunction sortByZIndexDescending(layer, otherLayer) {\n  return (otherLayer.zIndex || 0) - (layer.zIndex || 0);\n}\n/**\n * @private\n */\n\n\nfunction getHitHandle(type) {\n  var hitHandle;\n\n  for (var tryHandle in EventTypes) {\n    if (EventTypes[tryHandle] === type) {\n      hitHandle = tryHandle;\n      break;\n    }\n  }\n\n  return hitHandle;\n}\n/**\n * @private\n */\n\n\nfunction getLayerAtPoint(root, type, point, tx, ty) {\n  var layer = null;\n  var hitHandle = getHitHandle(type);\n  var sortedChildren;\n  var hitFrame = FrameUtils.clone(root.frame); // Early bail for non-visible layers\n\n  if (typeof root.alpha === 'number' && root.alpha < 0.01) {\n    return null;\n  } // Child-first search\n\n\n  if (root.children) {\n    sortedChildren = root.children.slice().reverse().sort(sortByZIndexDescending);\n\n    for (var i = 0, len = sortedChildren.length; i < len; i++) {\n      layer = getLayerAtPoint(sortedChildren[i], type, point, tx + (root.translateX || 0), ty + (root.translateY || 0));\n\n      if (layer) {\n        break;\n      }\n    }\n  } // Check for hit outsets\n\n\n  if (root.hitOutsets) {\n    hitFrame = FrameUtils.inset(FrameUtils.clone(hitFrame), -root.hitOutsets[0], -root.hitOutsets[1], -root.hitOutsets[2], -root.hitOutsets[3]);\n  } // Check for x/y translation\n\n\n  if (tx) {\n    hitFrame.x += tx;\n  }\n\n  if (ty) {\n    hitFrame.y += ty;\n  } // No child layer at the given point. Try the parent layer.\n\n\n  if (!layer && root[hitHandle] && FrameUtils.intersects(hitFrame, point)) {\n    layer = root;\n  }\n\n  return layer;\n}\n\nmodule.exports = hitTest;\nmodule.exports.getHitHandle = getHitHandle;","map":{"version":3,"sources":["C:/Users/sonwonjae/react/react-tutorial/canvas-example/node_modules/react-canvas/lib/hitTest.js"],"names":["FrameUtils","require","EventTypes","hitTest","e","rootLayer","rootNode","touch","touches","touchX","pageX","touchY","pageY","rootNodeBox","getBoundingClientRect","left","top","window","pageYOffset","pageXOffset","getLayerAtPoint","type","make","translateX","translateY","sortByZIndexDescending","layer","otherLayer","zIndex","getHitHandle","hitHandle","tryHandle","root","point","tx","ty","sortedChildren","hitFrame","clone","frame","alpha","children","slice","reverse","sort","i","len","length","hitOutsets","inset","x","y","intersects","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar FrameUtils = require('./FrameUtils');\nvar EventTypes = require('./EventTypes');\n\n/**\n * RenderLayer hit testing\n *\n * @param {Event} e\n * @param {RenderLayer} rootLayer\n * @param {?HTMLElement} rootNode\n * @return {RenderLayer}\n */\nfunction hitTest (e, rootLayer, rootNode) {\n  var touch = e.touches ? e.touches[0] : e;\n  var touchX = touch.pageX;\n  var touchY = touch.pageY;\n  var rootNodeBox;\n  if (rootNode) {\n    rootNodeBox = rootNode.getBoundingClientRect();\n    touchX -= rootNodeBox.left;\n    touchY -= rootNodeBox.top;\n  }\n\n  touchY = touchY - window.pageYOffset;\n  touchX = touchX - window.pageXOffset;\n  return getLayerAtPoint(\n    rootLayer,\n    e.type,\n    FrameUtils.make(touchX, touchY, 1, 1),\n    rootLayer.translateX || 0,\n    rootLayer.translateY || 0\n  );\n}\n\n/**\n * @private\n */\nfunction sortByZIndexDescending (layer, otherLayer) {\n  return (otherLayer.zIndex || 0) - (layer.zIndex || 0);\n}\n\n/**\n * @private\n */\nfunction getHitHandle (type) {\n  var hitHandle;\n  for (var tryHandle in EventTypes) {\n    if (EventTypes[tryHandle] === type) {\n      hitHandle = tryHandle;\n      break;\n    }\n  }\n  return hitHandle;\n}\n\n/**\n * @private\n */\nfunction getLayerAtPoint (root, type, point, tx, ty) {\n  var layer = null;\n  var hitHandle = getHitHandle(type);\n  var sortedChildren;\n  var hitFrame = FrameUtils.clone(root.frame);\n\n  // Early bail for non-visible layers\n  if (typeof root.alpha === 'number' && root.alpha < 0.01) {\n    return null;\n  }\n\n  // Child-first search\n  if (root.children) {\n    sortedChildren = root.children.slice().reverse().sort(sortByZIndexDescending);\n    for (var i=0, len=sortedChildren.length; i < len; i++) {\n      layer = getLayerAtPoint(\n        sortedChildren[i],\n        type,\n        point,\n        tx + (root.translateX || 0),\n        ty + (root.translateY || 0)\n      );\n      if (layer) {\n        break;\n      }\n    }\n  }\n\n  // Check for hit outsets\n  if (root.hitOutsets) {\n    hitFrame = FrameUtils.inset(FrameUtils.clone(hitFrame),\n      -root.hitOutsets[0], -root.hitOutsets[1],\n      -root.hitOutsets[2], -root.hitOutsets[3]\n    );\n  }\n\n  // Check for x/y translation\n  if (tx) {\n    hitFrame.x += tx;\n  }\n\n  if (ty) {\n    hitFrame.y += ty;\n  }\n\n  // No child layer at the given point. Try the parent layer.\n  if (!layer && root[hitHandle] && FrameUtils.intersects(hitFrame, point)) {\n    layer = root;\n  }\n\n  return layer;\n}\n\nmodule.exports = hitTest;\nmodule.exports.getHitHandle = getHitHandle;\n\n"]},"metadata":{},"sourceType":"script"}