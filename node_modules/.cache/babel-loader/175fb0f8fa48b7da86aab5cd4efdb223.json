{"ast":null,"code":"'use strict';\n\nfunction Frame(x, y, width, height) {\n  this.x = x;\n  this.y = y;\n  this.width = width;\n  this.height = height;\n}\n/**\n * Get a frame object\n *\n * @param {Number} x\n * @param {Number} y\n * @param {Number} width\n * @param {Number} height\n * @return {Frame}\n */\n\n\nfunction make(x, y, width, height) {\n  return new Frame(x, y, width, height);\n}\n/**\n * Return a zero size anchored at (0, 0).\n *\n * @return {Frame}\n */\n\n\nfunction zero() {\n  return make(0, 0, 0, 0);\n}\n/**\n * Return a cloned frame\n *\n * @param {Frame} frame\n * @return {Frame}\n */\n\n\nfunction clone(frame) {\n  return make(frame.x, frame.y, frame.width, frame.height);\n}\n/**\n * Creates a new frame by a applying edge insets. This method accepts CSS\n * shorthand notation e.g. inset(myFrame, 10, 0);\n *\n * @param {Frame} frame\n * @param {Number} top\n * @param {Number} right\n * @param {?Number} bottom\n * @param {?Number} left\n * @return {Frame}\n */\n\n\nfunction inset(frame, top, right, bottom, left) {\n  var frameCopy = clone(frame); // inset(myFrame, 10, 0) => inset(myFrame, 10, 0, 10, 0)\n\n  if (typeof bottom === 'undefined') {\n    bottom = top;\n    left = right;\n  } // inset(myFrame, 10) => inset(myFrame, 10, 10, 10, 10)\n\n\n  if (typeof right === 'undefined') {\n    right = bottom = left = top;\n  }\n\n  frameCopy.x += left;\n  frameCopy.y += top;\n  frameCopy.height -= top + bottom;\n  frameCopy.width -= left + right;\n  return frameCopy;\n}\n/**\n * Compute the intersection region between 2 frames.\n *\n * @param {Frame} frame\n * @param {Frame} otherFrame\n * @return {Frame}\n */\n\n\nfunction intersection(frame, otherFrame) {\n  var x = Math.max(frame.x, otherFrame.x);\n  var width = Math.min(frame.x + frame.width, otherFrame.x + otherFrame.width);\n  var y = Math.max(frame.y, otherFrame.y);\n  var height = Math.min(frame.y + frame.height, otherFrame.y + otherFrame.height);\n\n  if (width >= x && height >= y) {\n    return make(x, y, width - x, height - y);\n  }\n\n  return null;\n}\n/**\n * Compute the union of two frames\n *\n * @param {Frame} frame\n * @param {Frame} otherFrame\n * @return {Frame}\n */\n\n\nfunction union(frame, otherFrame) {\n  var x1 = Math.min(frame.x, otherFrame.x);\n  var x2 = Math.max(frame.x + frame.width, otherFrame.x + otherFrame.width);\n  var y1 = Math.min(frame.y, otherFrame.y);\n  var y2 = Math.max(frame.y + frame.height, otherFrame.y + otherFrame.height);\n  return make(x1, y1, x2 - x1, y2 - y1);\n}\n/**\n * Determine if 2 frames intersect each other\n *\n * @param {Frame} frame\n * @param {Frame} otherFrame\n * @return {Boolean}\n */\n\n\nfunction intersects(frame, otherFrame) {\n  return !(otherFrame.x > frame.x + frame.width || otherFrame.x + otherFrame.width < frame.x || otherFrame.y > frame.y + frame.height || otherFrame.y + otherFrame.height < frame.y);\n}\n\nmodule.exports = {\n  make: make,\n  zero: zero,\n  clone: clone,\n  inset: inset,\n  intersection: intersection,\n  intersects: intersects,\n  union: union\n};","map":{"version":3,"sources":["C:/Users/sonwonjae/react/react-tutorial/canvas-example/node_modules/react-canvas/lib/FrameUtils.js"],"names":["Frame","x","y","width","height","make","zero","clone","frame","inset","top","right","bottom","left","frameCopy","intersection","otherFrame","Math","max","min","union","x1","x2","y1","y2","intersects","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nfunction Frame (x, y, width, height) {\n  this.x = x;\n  this.y = y;\n  this.width = width;\n  this.height = height;\n}\n\n/**\n * Get a frame object\n *\n * @param {Number} x\n * @param {Number} y\n * @param {Number} width\n * @param {Number} height\n * @return {Frame}\n */\nfunction make (x, y, width, height) {\n  return new Frame(x, y, width, height);\n}\n\n/**\n * Return a zero size anchored at (0, 0).\n *\n * @return {Frame}\n */\nfunction zero () {\n  return make(0, 0, 0, 0);\n}\n\n/**\n * Return a cloned frame\n *\n * @param {Frame} frame\n * @return {Frame}\n */\nfunction clone (frame) {\n  return make(frame.x, frame.y, frame.width, frame.height);\n}\n\n/**\n * Creates a new frame by a applying edge insets. This method accepts CSS\n * shorthand notation e.g. inset(myFrame, 10, 0);\n *\n * @param {Frame} frame\n * @param {Number} top\n * @param {Number} right\n * @param {?Number} bottom\n * @param {?Number} left\n * @return {Frame}\n */\nfunction inset (frame, top, right, bottom, left) {\n  var frameCopy = clone(frame);\n\n  // inset(myFrame, 10, 0) => inset(myFrame, 10, 0, 10, 0)\n  if (typeof bottom === 'undefined') {\n    bottom = top;\n    left = right;\n  }\n\n  // inset(myFrame, 10) => inset(myFrame, 10, 10, 10, 10)\n  if (typeof right === 'undefined') {\n    right = bottom = left = top;\n  }\n\n  frameCopy.x += left;\n  frameCopy.y += top;\n  frameCopy.height -= (top + bottom);\n  frameCopy.width -= (left + right);\n\n  return frameCopy;\n}\n\n/**\n * Compute the intersection region between 2 frames.\n *\n * @param {Frame} frame\n * @param {Frame} otherFrame\n * @return {Frame}\n */\nfunction intersection (frame, otherFrame) {\n  var x = Math.max(frame.x, otherFrame.x);\n  var width = Math.min(frame.x + frame.width, otherFrame.x + otherFrame.width);\n  var y = Math.max(frame.y, otherFrame.y);\n  var height = Math.min(frame.y + frame.height, otherFrame.y + otherFrame.height);\n  if (width >= x && height >= y) {\n    return make(x, y, width - x, height - y);\n  }\n  return null;\n}\n\n/**\n * Compute the union of two frames\n *\n * @param {Frame} frame\n * @param {Frame} otherFrame\n * @return {Frame}\n */\nfunction union (frame, otherFrame) {\n  var x1 = Math.min(frame.x, otherFrame.x);\n  var x2 = Math.max(frame.x + frame.width, otherFrame.x + otherFrame.width);\n  var y1 = Math.min(frame.y, otherFrame.y);\n  var y2 = Math.max(frame.y + frame.height, otherFrame.y + otherFrame.height);\n  return make(x1, y1, x2 - x1, y2 - y1);\n}\n\n/**\n * Determine if 2 frames intersect each other\n *\n * @param {Frame} frame\n * @param {Frame} otherFrame\n * @return {Boolean}\n */\nfunction intersects (frame, otherFrame) {\n  return !(otherFrame.x > frame.x + frame.width ||\n           otherFrame.x + otherFrame.width < frame.x ||\n           otherFrame.y > frame.y + frame.height ||\n           otherFrame.y + otherFrame.height < frame.y);\n}\n\nmodule.exports = {\n  make: make,\n  zero: zero,\n  clone: clone,\n  inset: inset,\n  intersection: intersection,\n  intersects: intersects,\n  union: union\n};\n\n"]},"metadata":{},"sourceType":"script"}