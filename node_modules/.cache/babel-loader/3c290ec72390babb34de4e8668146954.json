{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sonwonjae\\\\react\\\\react-tutorial\\\\canvas-example\\\\src\\\\three\\\\ThreeTuto2.js\";\nimport React, { Component } from 'react';\nimport * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols';\nimport * as dat from 'dat.gui';\nimport gsap from 'gsap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class ThreeTuto2 extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.animate = () => {\n      this.renderer.render(this.scene, this.camera);\n      requestAnimationFrame(this.animate); // 배경 움직임\n\n      this.frame += 0.01;\n      const {\n        array,\n        originalPosition,\n        randomValue\n      } = this.planeMesh.geometry.attributes.position;\n\n      for (let i = 0; i < array.length; i += 3) {\n        // x\n        array[i] = originalPosition[i] + Math.cos(this.frame + randomValue[i]) * 0.01;\n        this.planeMesh.geometry.attributes.position.needsUpdate = true; // y\n\n        array[i + 1] = originalPosition[i + 1] + Math.sin(this.frame + randomValue[i + 1]) * 0.01;\n        this.planeMesh.geometry.attributes.position.needsUpdate = true;\n      }\n\n      this.raycaster.setFromCamera(this.mouse, this.camera);\n      const intersects = this.raycaster.intersectObject(this.planeMesh);\n\n      if (intersects.length > 0) {\n        const {\n          color\n        } = intersects[0].object.geometry.attributes; // vertice 1\n\n        color.setX(intersects[0].face.a, 0.3);\n        color.setY(intersects[0].face.a, 0.6);\n        color.setZ(intersects[0].face.a, 1); // vertice 2\n\n        color.setX(intersects[0].face.b, 0.3);\n        color.setY(intersects[0].face.b, 0.6);\n        color.setZ(intersects[0].face.b, 1); // vertice 3\n\n        color.setX(intersects[0].face.c, 0.3);\n        color.setY(intersects[0].face.c, 0.6);\n        color.setZ(intersects[0].face.c, 1);\n        color.needsUpdate = true;\n        const initialColor = {\n          r: 0,\n          g: 0,\n          b: 0\n        };\n        const hoverColor = {\n          r: 0.3,\n          g: 0.6,\n          b: 1\n        };\n        gsap.to(hoverColor, {\n          r: initialColor.r,\n          g: initialColor.g,\n          b: initialColor.b,\n          duration: 1,\n          onUpdate: () => {\n            // vertice 1\n            color.setX(intersects[0].face.a, hoverColor.r);\n            color.setY(intersects[0].face.a, hoverColor.g);\n            color.setZ(intersects[0].face.a, hoverColor.b); // vertice 2\n\n            color.setX(intersects[0].face.b, hoverColor.r);\n            color.setY(intersects[0].face.b, hoverColor.g);\n            color.setZ(intersects[0].face.b, hoverColor.b); // vertice 3\n\n            color.setX(intersects[0].face.c, hoverColor.r);\n            color.setY(intersects[0].face.c, hoverColor.g);\n            color.setZ(intersects[0].face.c, hoverColor.b);\n          }\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    this.width = width;\n    this.height = height; // resize 이벤트\n\n    window.addEventListener('resize', () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }); //raycaster 추가\n\n    const raycaster = new THREE.Raycaster(); // 카메라로 찍으려는 3D무대\n\n    const scene = new THREE.Scene(); // 카메라\n\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000); // 플레이어 or 영사기\n\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(width, height); // 픽셀단위로 진하게 해줌\n\n    renderer.setPixelRatio(devicePixelRatio); // HTML canvas\n\n    this.element.appendChild(renderer.domElement); //GUI\n\n    const gui = new dat.GUI();\n    const world = {\n      plane: {\n        width: 800,\n        height: 800,\n        widthSegments: 100,\n        heightSegments: 100\n      }\n    }; // x값 조정하는 GUI\n\n    gui.add(world.plane, 'width', 100, 600).onChange(generatePlane); // y값 조정하는 GUI\n\n    gui.add(world.plane, 'height', 100, 600).onChange(generatePlane); // x seg값 조정하는 GUI\n\n    gui.add(world.plane, 'widthSegments', 10, 200).onChange(generatePlane); // y seg값 조정하는 GUI\n\n    gui.add(world.plane, 'heightSegments', 10, 200).onChange(generatePlane);\n    const randomValue = [];\n\n    function generatePlane() {\n      planeMesh.geometry.dispose();\n      planeMesh.geometry = new THREE.PlaneGeometry(world.plane.width, world.plane.height, world.plane.widthSegments, world.plane.heightSegments); // x,y,z 값 조정법\n\n      const {\n        array\n      } = planeMesh.geometry.attributes.position;\n\n      for (let i = 0; i < array.length; i++) {\n        if (i % 3 === 0) {\n          const x = array[i];\n          const y = array[i + 1];\n          const z = array[i + 2];\n          array[i] = x + (Math.random() - 0.5) * 3;\n          array[i + 2] = y + (Math.random() - 0.5) * 3;\n          array[i + 2] = z + (Math.random() - 0.5) * 3;\n        }\n\n        randomValue.push(Math.random() * Math.PI * 3);\n      } // randomValue 정의\n\n\n      planeMesh.geometry.attributes.position.randomValue = randomValue; // OriginalPosition 정의\n\n      planeMesh.geometry.attributes.position.originalPosition = planeMesh.geometry.attributes.position.array;\n      const colors = [];\n\n      for (let i = 0; i < planeMesh.geometry.attributes.position.count; i++) {\n        // r,g,b\n        colors.push(0.05, 0.1, 0.2);\n      }\n\n      planeMesh.geometry.setAttribute('color', new THREE.BufferAttribute(new Float32Array(colors), 3));\n    } // PlaneGeometry\n\n\n    const planeGeometry = new THREE.PlaneGeometry(world.plane.width, world.plane.height, world.plane.widthSegments, world.plane.heightSegments);\n    const planeMeterial = new THREE.MeshPhongMaterial({\n      side: THREE.DoubleSide,\n      flatShading: THREE.FlatShading,\n      vertexColors: true\n    });\n    const planeMesh = new THREE.Mesh(planeGeometry, planeMeterial);\n    scene.add(planeMesh);\n    generatePlane(); // 빛\n\n    const light = new THREE.DirectionalLight(0xffffff, 1);\n    light.position.set(1, -1, 1);\n    scene.add(light); // 뒤쪽 빛\n\n    const backLight = new THREE.DirectionalLight(0xffffff, 1);\n    backLight.position.set(0, 0, -1);\n    scene.add(backLight); // OrbitControls\n\n    new OrbitControls(camera, renderer.domElement); // 카메라 뷰 깊이\n\n    camera.position.z = 50;\n    camera.rotateX(-50);\n    camera.rotateY(-50);\n    const mouse = {\n      x: undefined,\n      y: undefined\n    };\n    window.addEventListener('mousemove', e => {\n      mouse.x = e.clientX / window.innerWidth * 2 - 1;\n      mouse.y = -(e.clientY / window.innerHeight) * 2 + 1;\n    }); // frame\n\n    const frame = 0;\n    this.scene = scene;\n    this.camera = camera;\n    this.renderer = renderer;\n    this.planeMesh = planeMesh;\n    this.mouse = mouse;\n    this.raycaster = raycaster;\n    this.frame = frame;\n    this.randomValue = randomValue;\n    this.animate(); // 클릭 옵션\n\n    document.querySelector('#link').addEventListener('click', e => {\n      e.preventDefault();\n      gsap.to('#container', {\n        opacity: 0\n      });\n      gsap.to(camera.position, {\n        x: 75,\n        y: -75,\n        z: 10,\n        duration: 1.2\n      });\n      gsap.to(camera.rotation, {\n        x: 1,\n        y: 1,\n        duration: 1.2,\n        onComplete: () => {\n          window.location = 'http://localhost:3000/#/main';\n        }\n      });\n      gsap.to(light, {\n        intensity: 0,\n        duration: 1.2\n      });\n    });\n  } // 첫 줄은 카메라 뷰로 렌더링하겠다\n  // 다음 두 줄은 3D박스를 x,y축으로 0.01씩 이동하겠다\n  // 마지막 requestAnimationFrame 함수는 this.animate함수를 계속 호출하라는 뜻\n  // 최대 1ms (1초에 60번씩 그려라) => 성능이 낮은 PC나 CPU/GPU 점유율에 따라 동적으로 변하기도 함\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: el => this.element = el\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 12\n    }, this);\n  }\n\n}\nexport default ThreeTuto2;","map":{"version":3,"sources":["C:/Users/sonwonjae/react/react-tutorial/canvas-example/src/three/ThreeTuto2.js"],"names":["React","Component","THREE","OrbitControls","dat","gsap","ThreeTuto2","animate","renderer","render","scene","camera","requestAnimationFrame","frame","array","originalPosition","randomValue","planeMesh","geometry","attributes","position","i","length","Math","cos","needsUpdate","sin","raycaster","setFromCamera","mouse","intersects","intersectObject","color","object","setX","face","a","setY","setZ","b","c","initialColor","r","g","hoverColor","to","duration","onUpdate","componentDidMount","width","window","innerWidth","height","innerHeight","addEventListener","aspect","updateProjectionMatrix","setSize","Raycaster","Scene","PerspectiveCamera","WebGLRenderer","setPixelRatio","devicePixelRatio","element","appendChild","domElement","gui","GUI","world","plane","widthSegments","heightSegments","add","onChange","generatePlane","dispose","PlaneGeometry","x","y","z","random","push","PI","colors","count","setAttribute","BufferAttribute","Float32Array","planeGeometry","planeMeterial","MeshPhongMaterial","side","DoubleSide","flatShading","FlatShading","vertexColors","Mesh","light","DirectionalLight","set","backLight","rotateX","rotateY","undefined","e","clientX","clientY","document","querySelector","preventDefault","opacity","rotation","onComplete","location","intensity","el"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport * as THREE from 'three';\r\nimport OrbitControls from 'three-orbitcontrols';\r\n\r\nimport * as dat from 'dat.gui';\r\nimport gsap from 'gsap';\r\n\r\nexport class ThreeTuto2 extends Component {\r\n  componentDidMount() {\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n    this.width = width;\r\n    this.height = height;\r\n\r\n    // resize 이벤트\r\n    window.addEventListener('resize', () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    });\r\n\r\n    //raycaster 추가\r\n    const raycaster = new THREE.Raycaster();\r\n\r\n    // 카메라로 찍으려는 3D무대\r\n    const scene = new THREE.Scene();\r\n\r\n    // 카메라\r\n    const camera = new THREE.PerspectiveCamera(\r\n      75,\r\n      window.innerWidth / window.innerHeight,\r\n      0.1,\r\n      1000\r\n    );\r\n\r\n    // 플레이어 or 영사기\r\n    const renderer = new THREE.WebGLRenderer();\r\n    renderer.setSize(width, height);\r\n\r\n    // 픽셀단위로 진하게 해줌\r\n    renderer.setPixelRatio(devicePixelRatio);\r\n\r\n    // HTML canvas\r\n    this.element.appendChild(renderer.domElement);\r\n    //GUI\r\n    const gui = new dat.GUI();\r\n    const world = {\r\n      plane: {\r\n        width: 800,\r\n        height: 800,\r\n        widthSegments: 100,\r\n        heightSegments: 100\r\n      }\r\n    };\r\n\r\n    // x값 조정하는 GUI\r\n    gui.add(world.plane, 'width', 100, 600).onChange(generatePlane);\r\n\r\n    // y값 조정하는 GUI\r\n    gui.add(world.plane, 'height', 100, 600).onChange(generatePlane);\r\n\r\n    // x seg값 조정하는 GUI\r\n    gui.add(world.plane, 'widthSegments', 10, 200).onChange(generatePlane);\r\n\r\n    // y seg값 조정하는 GUI\r\n    gui.add(world.plane, 'heightSegments', 10, 200).onChange(generatePlane);\r\n    const randomValue = [];\r\n\r\n    function generatePlane() {\r\n      planeMesh.geometry.dispose();\r\n      planeMesh.geometry = new THREE.PlaneGeometry(\r\n        world.plane.width,\r\n        world.plane.height,\r\n        world.plane.widthSegments,\r\n        world.plane.heightSegments\r\n      );\r\n\r\n      // x,y,z 값 조정법\r\n      const { array } = planeMesh.geometry.attributes.position;\r\n      for (let i = 0; i < array.length; i++) {\r\n        if (i % 3 === 0) {\r\n          const x = array[i];\r\n          const y = array[i + 1];\r\n          const z = array[i + 2];\r\n\r\n          array[i] = x + (Math.random() - 0.5) * 3;\r\n          array[i + 2] = y + (Math.random() - 0.5) * 3;\r\n          array[i + 2] = z + (Math.random() - 0.5) * 3;\r\n        }\r\n        randomValue.push(Math.random() * Math.PI * 3);\r\n      }\r\n\r\n      // randomValue 정의\r\n      planeMesh.geometry.attributes.position.randomValue = randomValue;\r\n\r\n      // OriginalPosition 정의\r\n      planeMesh.geometry.attributes.position.originalPosition =\r\n        planeMesh.geometry.attributes.position.array;\r\n      const colors = [];\r\n      for (let i = 0; i < planeMesh.geometry.attributes.position.count; i++) {\r\n        // r,g,b\r\n        colors.push(0.05, 0.1, 0.2);\r\n      }\r\n\r\n      planeMesh.geometry.setAttribute(\r\n        'color',\r\n        new THREE.BufferAttribute(new Float32Array(colors), 3)\r\n      );\r\n    }\r\n\r\n    // PlaneGeometry\r\n    const planeGeometry = new THREE.PlaneGeometry(\r\n      world.plane.width,\r\n      world.plane.height,\r\n      world.plane.widthSegments,\r\n      world.plane.heightSegments\r\n    );\r\n    const planeMeterial = new THREE.MeshPhongMaterial({\r\n      side: THREE.DoubleSide,\r\n      flatShading: THREE.FlatShading,\r\n      vertexColors: true\r\n    });\r\n    const planeMesh = new THREE.Mesh(planeGeometry, planeMeterial);\r\n    scene.add(planeMesh);\r\n    generatePlane();\r\n\r\n    // 빛\r\n    const light = new THREE.DirectionalLight(0xffffff, 1);\r\n    light.position.set(1, -1, 1);\r\n    scene.add(light);\r\n\r\n    // 뒤쪽 빛\r\n    const backLight = new THREE.DirectionalLight(0xffffff, 1);\r\n    backLight.position.set(0, 0, -1);\r\n    scene.add(backLight);\r\n\r\n    // OrbitControls\r\n    new OrbitControls(camera, renderer.domElement);\r\n\r\n    // 카메라 뷰 깊이\r\n    camera.position.z = 50;\r\n    camera.rotateX(-50);\r\n    camera.rotateY(-50);\r\n\r\n    const mouse = {\r\n      x: undefined,\r\n      y: undefined\r\n    };\r\n\r\n    window.addEventListener('mousemove', (e) => {\r\n      mouse.x = (e.clientX / window.innerWidth) * 2 - 1;\r\n      mouse.y = -(e.clientY / window.innerHeight) * 2 + 1;\r\n    });\r\n\r\n    // frame\r\n    const frame = 0;\r\n\r\n    this.scene = scene;\r\n    this.camera = camera;\r\n    this.renderer = renderer;\r\n    this.planeMesh = planeMesh;\r\n\r\n    this.mouse = mouse;\r\n    this.raycaster = raycaster;\r\n\r\n    this.frame = frame;\r\n    this.randomValue = randomValue;\r\n    this.animate();\r\n\r\n    // 클릭 옵션\r\n    document.querySelector('#link').addEventListener('click', (e) => {\r\n      e.preventDefault();\r\n      gsap.to('#container', {\r\n        opacity: 0\r\n      });\r\n      gsap.to(camera.position, {\r\n        x: 75,\r\n        y: -75,\r\n        z: 10,\r\n        duration: 1.2\r\n      });\r\n      gsap.to(camera.rotation, {\r\n        x: 1,\r\n        y: 1,\r\n        duration: 1.2,\r\n        onComplete: () => {\r\n          window.location = 'http://localhost:3000/#/main';\r\n        }\r\n      });\r\n      gsap.to(light, {\r\n        intensity: 0,\r\n        duration: 1.2\r\n      });\r\n    });\r\n  }\r\n\r\n  // 첫 줄은 카메라 뷰로 렌더링하겠다\r\n  // 다음 두 줄은 3D박스를 x,y축으로 0.01씩 이동하겠다\r\n  // 마지막 requestAnimationFrame 함수는 this.animate함수를 계속 호출하라는 뜻\r\n  // 최대 1ms (1초에 60번씩 그려라) => 성능이 낮은 PC나 CPU/GPU 점유율에 따라 동적으로 변하기도 함\r\n\r\n  animate = () => {\r\n    this.renderer.render(this.scene, this.camera);\r\n    requestAnimationFrame(this.animate);\r\n\r\n    // 배경 움직임\r\n    this.frame += 0.01;\r\n    const {\r\n      array,\r\n      originalPosition,\r\n      randomValue\r\n    } = this.planeMesh.geometry.attributes.position;\r\n\r\n    for (let i = 0; i < array.length; i += 3) {\r\n      // x\r\n      array[i] =\r\n        originalPosition[i] + Math.cos(this.frame + randomValue[i]) * 0.01;\r\n\r\n      this.planeMesh.geometry.attributes.position.needsUpdate = true;\r\n\r\n      // y\r\n      array[i + 1] =\r\n        originalPosition[i + 1] +\r\n        Math.sin(this.frame + randomValue[i + 1]) * 0.01;\r\n\r\n      this.planeMesh.geometry.attributes.position.needsUpdate = true;\r\n    }\r\n\r\n    this.raycaster.setFromCamera(this.mouse, this.camera);\r\n    const intersects = this.raycaster.intersectObject(this.planeMesh);\r\n    if (intersects.length > 0) {\r\n      const { color } = intersects[0].object.geometry.attributes;\r\n\r\n      // vertice 1\r\n      color.setX(intersects[0].face.a, 0.3);\r\n      color.setY(intersects[0].face.a, 0.6);\r\n      color.setZ(intersects[0].face.a, 1);\r\n\r\n      // vertice 2\r\n      color.setX(intersects[0].face.b, 0.3);\r\n      color.setY(intersects[0].face.b, 0.6);\r\n      color.setZ(intersects[0].face.b, 1);\r\n\r\n      // vertice 3\r\n      color.setX(intersects[0].face.c, 0.3);\r\n      color.setY(intersects[0].face.c, 0.6);\r\n      color.setZ(intersects[0].face.c, 1);\r\n\r\n      color.needsUpdate = true;\r\n\r\n      const initialColor = {\r\n        r: 0,\r\n        g: 0,\r\n        b: 0\r\n      };\r\n\r\n      const hoverColor = {\r\n        r: 0.3,\r\n        g: 0.6,\r\n        b: 1\r\n      };\r\n      gsap.to(hoverColor, {\r\n        r: initialColor.r,\r\n        g: initialColor.g,\r\n        b: initialColor.b,\r\n        duration: 1,\r\n        onUpdate: () => {\r\n          // vertice 1\r\n          color.setX(intersects[0].face.a, hoverColor.r);\r\n          color.setY(intersects[0].face.a, hoverColor.g);\r\n          color.setZ(intersects[0].face.a, hoverColor.b);\r\n\r\n          // vertice 2\r\n          color.setX(intersects[0].face.b, hoverColor.r);\r\n          color.setY(intersects[0].face.b, hoverColor.g);\r\n          color.setZ(intersects[0].face.b, hoverColor.b);\r\n\r\n          // vertice 3\r\n          color.setX(intersects[0].face.c, hoverColor.r);\r\n          color.setY(intersects[0].face.c, hoverColor.g);\r\n          color.setZ(intersects[0].face.c, hoverColor.b);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return <div ref={(el) => (this.element = el)}></div>;\r\n  }\r\n}\r\n\r\nexport default ThreeTuto2;\r\n"]},"metadata":{},"sourceType":"module"}